<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-03T19:21:02-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Enze “Alex” Liu</title><subtitle>devlopr-jekyll is a Jekyll Theme Built For Developers</subtitle><author><name>Enze &quot;Alex&quot; Liu</name></author><entry><title type="html">What Is RIPE Atlas And How To Use It</title><link href="http://localhost:4000/notes/2019/10/03/what_is_atlas_and_how_to_use_it/" rel="alternate" type="text/html" title="What Is RIPE Atlas And How To Use It" /><published>2019-10-03T04:05:23-07:00</published><updated>2019-10-03T04:05:23-07:00</updated><id>http://localhost:4000/notes/2019/10/03/what_is_atlas_and_how_to_use_it</id><content type="html" xml:base="http://localhost:4000/notes/2019/10/03/what_is_atlas_and_how_to_use_it/">&lt;h1 id=&quot;ripe-atlas&quot;&gt;RIPE Atlas&lt;/h1&gt;
&lt;p&gt;Reference:
&lt;a href=&quot;https://atlas.ripe.net/about/&quot;&gt;Atlas About&lt;/a&gt;
&lt;a href=&quot;https://atlas.ripe.net/docs/udm/&quot;&gt;User-Defined Measurements&lt;/a&gt;
&lt;a href=&quot;https://atlas.ripe.net/docs/api/v2/manual/&quot;&gt;API Manual v2&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-ripe-atlas&quot;&gt;What is RIPE Atlas?&lt;/h2&gt;
&lt;p&gt;RIPE Atlas is a global network of &lt;strong&gt;probes that measure Internet connectivity and reachability&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are thousands of active probes in the RIPE Atlas network, and it is continually growing. The RIPE NCC collects data from this network and provides Internet maps, data tools and visualisations based on the aggregated results. RIPE Atlas &lt;strong&gt;users who host a probe can also use the entire RIPE Atlas network to conduct customised measurements&lt;/strong&gt; that provide valuable data about their own network.&lt;/p&gt;

&lt;h2 id=&quot;what-can-i-do-with-ripe-atlas&quot;&gt;What Can I Do With RIPE Atlas?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;monitor network reachability from thousands of vantage points around the globe&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Check the responsiveness of DNS infrastructure&lt;/strong&gt;, such as root name servers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-ripe-collect-data&quot;&gt;How RIPE Collect Data&lt;/h2&gt;
&lt;p&gt;RIPE Atlas &lt;strong&gt;probes&lt;/strong&gt; are small, USB-powered hardware devices that hosts attach to an Ethernet port on their router via a network (UTP) cable.&lt;/p&gt;

&lt;h2 id=&quot;definition-in-ripe-atlas-community&quot;&gt;Definition in RIPE Atlas Community&lt;/h2&gt;
&lt;p&gt;The RIPE Atlas community is made up of &lt;strong&gt;users&lt;/strong&gt;, &lt;strong&gt;hosts&lt;/strong&gt;, &lt;strong&gt;sponsors&lt;/strong&gt; and &lt;strong&gt;ambassadors&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Anyone who accesses RIPE Atlas maps and statistics, which are open and available to the public, is considered a RIPE Atlas &lt;strong&gt;user&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;host&lt;/strong&gt; is anyone who connects a probe or anchor to their own network. Hosts can conduct their own customised measurements in order to gain valuable information about their network using other RIPE Atlas probes.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;sponsor&lt;/strong&gt; is an individual or organisation that financially supports RIPE Atlas.&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;ambassador&lt;/strong&gt; is someone who helps us distribute RIPE Atlas probes.&lt;/p&gt;

&lt;p&gt;RIPE NCC members can also take advantage of special RIPE Atlas features, even if they do not host a probe.&lt;/p&gt;

&lt;h2 id=&quot;vision&quot;&gt;Vision&lt;/h2&gt;
&lt;p&gt;With RIPE Atlas, the RIPE NCC hopes to create the world’s largest Internet measurement network.&lt;/p&gt;

&lt;h2 id=&quot;creating-your-own-measurements&quot;&gt;Creating Your Own Measurements&lt;/h2&gt;
&lt;p&gt;The creation process consists of three steps: &lt;strong&gt;Definitions&lt;/strong&gt;, &lt;strong&gt;Probe selection&lt;/strong&gt; and &lt;strong&gt;Timing&lt;/strong&gt;. In the definitions section, you can select the types of measurements you would like to schedule, with the UI showing some configurable parameters, such as the target.&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;extra panel&lt;/strong&gt; at the bottom of the page shows you the real-time, API-compatible specification, which can be used to &lt;strong&gt;learn how to create measurements directly through the API&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;measurement-types&quot;&gt;Measurement Types&lt;/h3&gt;
&lt;p&gt;The available user-defined measurement (UDM) types are “Ping”, “Traceroute”, “DNS” and “SSL”. “HTTP” measurements are also technically possible but are restricted to researchers and other interested users on a case-by-case basis. Following is a list of measurement types and related parameters.&lt;/p&gt;

&lt;h4 id=&quot;ping&quot;&gt;Ping&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Address Family - Select whether you want to use IPv4 or IPv6.&lt;/li&gt;
  &lt;li&gt;Packets - The number of packets that should be sent in each ping.&lt;/li&gt;
  &lt;li&gt;Size - The size of the packets that are sent.&lt;/li&gt;
  &lt;li&gt;Description - Allows you to give the measurement a description to help you identify it.&lt;/li&gt;
  &lt;li&gt;Interval - The number of seconds each probe participating in the measurement will wait before attempting to perform the measurement again. A drop-down list will suggest some common options.&lt;/li&gt;
  &lt;li&gt;Spread – This distributes the start time of the probes’ measurements throughout the interval so that they are more evenly spaced. If spread is not specified, it will default to half of the interval, with a maximum of 400 seconds.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;dns&quot;&gt;DNS&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Address Family - Select whether you want to use IPv4 or IPv6.&lt;/li&gt;
  &lt;li&gt;Query Class - Specify if the query will be performed in the IN or CHAOS domain space.&lt;/li&gt;
  &lt;li&gt;Query Type - The type of DNS query to be performed.&lt;/li&gt;
  &lt;li&gt;Query Argument - The domain name (or IP address, in the case of reverse DNS) to look up.&lt;/li&gt;
  &lt;li&gt;Description - Allows you to give the measurement a description to help you identify it.&lt;/li&gt;
  &lt;li&gt;Interval - The number of seconds each probe participating in the measurement will wait before attempting to perform the measurement again.&lt;/li&gt;
  &lt;li&gt;Spread – This distributes the start time of the probes’ measurements throughout the interval so that they are more evenly spaced. If spread is not specified, it will default to half of the interval, with a maximum of 400 seconds.&lt;/li&gt;
  &lt;li&gt;Set DNSSEC OK Flag - Enable DNSSEC DO bit (RFC-3225). Default is off&lt;/li&gt;
  &lt;li&gt;Recursion desired - Enable recursion. This is the RD flag described in RFC1035.&lt;/li&gt;
  &lt;li&gt;Use Probe’s Resolver - Ese the probe’s list of local resolvers instead of specifying a target to use as the resolver.&lt;/li&gt;
  &lt;li&gt;Protocol - The protocol to use.&lt;/li&gt;
  &lt;li&gt;Retry Times - Number of attempts.&lt;/li&gt;
  &lt;li&gt;UDP Payload Size - The maximum reply size accepted. This field is described in RFC2671.&lt;/li&gt;
  &lt;li&gt;Include the Qbuf - Include a base64 encoded version of the queries made by the probe.&lt;/li&gt;
  &lt;li&gt;Exclude the Abuf - Exclude the full base64 encoded answer.&lt;/li&gt;
  &lt;li&gt;Prepend the Probe’s ID - Each probe prepends its probe number and a timestamp to the DNS query argument to make it unique&lt;/li&gt;
  &lt;li&gt;Use NSID - Include DNS nameserver identifier option (RFC5001)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;spread&quot;&gt;Spread&lt;/h4&gt;
&lt;p&gt;Spread can be set under “Advanced Options” in Step 1 when creating a new measurement using the web interface, and is also available via the API. Spread creates a distribution of individual measurements throughout the measurement interval, rather than clustering the measurements as closely together as possible. In this way, spread helps to avoid overloading targets with bursts of measurements and creates a more steady flow of packets.&lt;/p&gt;

&lt;p&gt;For example, if you use 60 probes for a measurement that is scheduled to take place every 240 seconds without any spread, all 60 probes would perform their measurement at nearly the same time, every 240 seconds. With a spread of 240 seconds, the probes will be assigned random start times throughout each interval. In this example, this would average out to one measurement every four seconds. The fewer the number of probes, the less uniform the distribution will be throughout the interval, since the probes are distributed randomly. However, the probes will stick to the specified frequency, so their distribution will remain the same from one interval to the next.&lt;/p&gt;

&lt;h3 id=&quot;probe-selection&quot;&gt;Probe Selection&lt;/h3&gt;
&lt;p&gt;The second step of the wizard helps select the probes that will participate in the UDM. By default, 50 probes worldwide are randomly selected, allowing you to skip this step if you like.&lt;/p&gt;

&lt;p&gt;You can specify a set of probes already used in a previously scheduled measurement or a new set of probes, either manually or through the probe selection wizard. The selections are displayed in an editable list.&lt;/p&gt;

&lt;h3 id=&quot;timing&quot;&gt;Timing&lt;/h3&gt;
&lt;p&gt;The third screen of the UDM wizard allows you to select the measurement’s start and stop times. The fields are Start and End time. You can also specify whether it is a One-off measurement.&lt;/p&gt;

&lt;h4 id=&quot;one-off&quot;&gt;One-off&lt;/h4&gt;
&lt;p&gt;One-off measurements, as the name suggests, execute only once. What makes them really attractive is the fact that they are near real time; results are delivered a few seconds (generally 8-10) after specifying the measurement. This makes one-offs an ideal tool for looking into network problems that are perceived “now”. If this option is selected, you can specify only the Start time.&lt;/p&gt;

&lt;h4 id=&quot;start&quot;&gt;Start&lt;/h4&gt;
&lt;p&gt;For the measurement start time, you can choose between ‘as soon as possible’ or a specific date and time (in UTC).&lt;/p&gt;

&lt;h4 id=&quot;end&quot;&gt;End&lt;/h4&gt;
&lt;p&gt;The measurement’s end time can be ‘never’ (which means it won’t stop until you manually stop it) or a specific date and time (in UTC).&lt;/p&gt;

&lt;p&gt;Once your measurement is submitted and accepted, you can immediately see it in your measurement list, and can check its results.&lt;/p&gt;

&lt;h3 id=&quot;measurement-statuses&quot;&gt;Measurement Statuses&lt;/h3&gt;
&lt;p&gt;Each measurement has a status, defined as one of these:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Specified: The measurement has been defined and sent to our infrastructure to be relayed to the probes.&lt;/li&gt;
  &lt;li&gt;Scheduled: The measurement has been relayed to the probes. If the start time is immediate, this status doesn’t last very long.&lt;/li&gt;
  &lt;li&gt;Ongoing: The measurement is running on available probes.&lt;/li&gt;
  &lt;li&gt;Stopped: The measurement was stopped either on schedule, by the user requesting an early stop.&lt;/li&gt;
  &lt;li&gt;Forced to Stop: The measurement was killed prematurely due to a lack of available credits.&lt;/li&gt;
  &lt;li&gt;No suitable probes: The measurement cannot currently be executed as defined due to a lack of available probes. This may be because you asked to use probes that don’t exist (for example, probes in an AS in which there are no probes) or because all of the probes you requested were too busy to take on new jobs. This latter scenario is very rare however.&lt;/li&gt;
  &lt;li&gt;Failed: If a probe never actually runs a single measurement over the duration of the specified start/stop time (typically due to a lack of available probes), it will be marked as Failed once the stop time has been reached.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other words, Specified, Scheduled, Ongoing, and No suitable probes are statuses potentially assigned to running measurements (or at least those who may return results at some point), while Stopped, Forced to Stop, and Failed are assigned to measurements that will not be returning any more results.&lt;/p&gt;

&lt;h3 id=&quot;rate-limits&quot;&gt;Rate Limits&lt;/h3&gt;
&lt;p&gt;The following rate limits apply for users/measurements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;No more than 100 simultaneous measurements&lt;/li&gt;
  &lt;li&gt;No more than 1000 probes may be used per measurement&lt;/li&gt;
  &lt;li&gt;No more than 100,000 results can be generated per day&lt;/li&gt;
  &lt;li&gt;No more than 50 measurement results per second per measurement. This is calculated as the spread divided by the number of probes.&lt;/li&gt;
  &lt;li&gt;No more than 1,000,000 credits may be used each day&lt;/li&gt;
  &lt;li&gt;No more than 25 ongoing and 25 one-off measurements of the same type running against the same target at any time&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cost&quot;&gt;&lt;a href=&quot;https://atlas.ripe.net/docs/credits/&quot;&gt;Cost&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The cost for the individual result depends on what type of measurement you conduct, and what options and flags were specified. The following sections describe the current settings. One-off measurement result is twice as expensive.&lt;/p&gt;

&lt;h4 id=&quot;ping-and-ping6&quot;&gt;Ping and ping6&lt;/h4&gt;
&lt;p&gt;Unit cost = N * (int(S/1500) + 1)&lt;/p&gt;

&lt;h4 id=&quot;dns-and-dns6&quot;&gt;DNS and DNS6&lt;/h4&gt;
&lt;p&gt;Unit cost for UDP: 10 credits/result
Unit cost for TCP: 20 credits/result&lt;/p&gt;

&lt;h3 id=&quot;querying-results-for-dns&quot;&gt;Querying Results For DNS&lt;/h3&gt;
&lt;p&gt;An example result of a DNS Lookup:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;af&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dst_addr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2001:7fd::1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;from&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2001:67c:2e8:ffe2:220:4aff:fec6:cc9d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4790&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;msm_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;msm_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tdig&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prb_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;proto&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UDP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;result&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ANCOUNT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ARCOUNT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20790&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NSCOUNT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;QDCOUNT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;abuf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UTaEAAABAAEADQAIAAAGAAEAAAYAAQABUYAAQAFhDHJvb3Qtc2VydmVycwNuZXQABW5zdGxkDHZlcmlzaWduLWdycwNjb20AeDo7WQAABwgAAAOEAAk6gAABUYAAAAIAAQAH6QAAAsAcAAACAAEAB+kAAAQBYsAeAAACAAEAB+kAAAQBY8AeAAACAAEAB+kAAAQBZMAeAAACAAEAB+kAAAQBZcAeAAACAAEAB+kAAAQBZsAeAAACAAEAB+kAAAQBZ8AeAAACAAEAB+kAAAQBaMAeAAACAAEAB+kAAAQBacAeAAACAAEAB+kAAAQBasAeAAACAAEAB+kAAAQBa8AeAAACAAEAB+kAAAQBbMAeAAACAAEAB+kAAAQBbcAewBwAHAABAAfpAAAQIAEFA7o+AAAAAAAAAAIAMMB0ABwAAQAH6QAAECABBQACAAAAAAAAAAAAAAvAgwAcAAEAB+kAABAgAQUAAAIAAAAAAAAAAAAMwJIAHAABAAfpAAAQIAEFAAAtAAAAAAAAAAAADcChABwAAQAH6QAAECABBQAAqAAAAAAAAAAAAA7AsAAcAAEAB+kAABAgAQUAAC8AAAAAAAAAAAAPwL8AHAABAAfpAAAQIAEFAAASAAAAAAAAAAANDcDOABwAAQAH6QAAECABBQAAAQAAAAAAAAAAAFM=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;answers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MNAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a.root-servers.net.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;RNAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nstld.verisign-grs.com.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SERIAL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2017082201&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TTL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;86400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TYPE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SOA&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;6.715&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;509&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src_addr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2001:67c:2e8:ffe2:220:4aff:fec6:cc9d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1503447622&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dns&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;data-structure-documentation&quot;&gt;&lt;a href=&quot;https://atlas.ripe.net/docs/data_struct/#v4750_dns&quot;&gt;Data Structure Documentation&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;“af” – [optional] IP version: “4” or “6” (int)&lt;/li&gt;
  &lt;li&gt;“bundle” – [optional] instance ID for a collection of related measurement results (int)&lt;/li&gt;
  &lt;li&gt;“dst_addr” – [optional] IP address of the destination (string)&lt;/li&gt;
  &lt;li&gt;“dst_name” – [optional] hostname of the destination (string)&lt;/li&gt;
  &lt;li&gt;“error” – [optional] error message (object with the following fields:)
    &lt;ul&gt;
      &lt;li&gt;“timeout” – query timeout (int)&lt;/li&gt;
      &lt;li&gt;“getaddrinfo” – error message (string)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;“from” – [optional] IP address of the source (string)&lt;/li&gt;
  &lt;li&gt;“group_id” – [optional] If the measurement belongs to a group of measurements, the identifier of the group (int)&lt;/li&gt;
  &lt;li&gt;“lts” – last time synchronised. How long ago (in seconds) the clock of the probe was found to be in sync with that of a controller. The value -1 is used to indicate that the probe does not know whether it is in sync (int)&lt;/li&gt;
  &lt;li&gt;“msm_id” – measurement identifier (int)&lt;/li&gt;
  &lt;li&gt;“msm_name” – measurement type “Tdig” (string)&lt;/li&gt;
  &lt;li&gt;“prb_id” – source probe ID (int)&lt;/li&gt;
  &lt;li&gt;“proto” – “TCP” or “UDP” (string)&lt;/li&gt;
  &lt;li&gt;“qbuf” – [optional] query payload buffer which was sent to the server, base64 encoded (string)&lt;/li&gt;
  &lt;li&gt;“result” – [optional] response from the DNS server (object with the following fields:)
    &lt;ul&gt;
      &lt;li&gt;“ANCOUNT” – answer count, RFC 1035 4.1.1 (int)&lt;/li&gt;
      &lt;li&gt;“ARCOUNT” – additional record count, RFC 1035, 4.1.1 (int)&lt;/li&gt;
      &lt;li&gt;“ID” – query ID, RFC 1035 4.1.1 (int)&lt;/li&gt;
      &lt;li&gt;“NSCOUNT” – name server count (int)&lt;/li&gt;
      &lt;li&gt;“QDCOUNT” – number of queries (int)&lt;/li&gt;
      &lt;li&gt;“abuf” – answer payload buffer from the server, base64 encoded (string)&lt;/li&gt;
      &lt;li&gt;“answers” – first two records from the response decoded by the probe, if they are TXT or SOA; other 	RR can * be decoded from “abuf” (array of objects)
  objects have the following fields:
        &lt;ul&gt;
          &lt;li&gt;“MNAME” – domain name, RFC 1035, 3.1.13 (string)&lt;/li&gt;
          &lt;li&gt;“NAME” – domain name. (string)&lt;/li&gt;
          &lt;li&gt;“RDATA” – [type TXT] txt value (list of strings)&lt;/li&gt;
          &lt;li&gt;“RNAME” – [if type SOA] mailbox, RFC 1035 3.3.13 (string)&lt;/li&gt;
          &lt;li&gt;“SERIAL” – [type SOA] zone serial number, RFC 1035 3.3.13 (int)&lt;/li&gt;
          &lt;li&gt;“TTL” – [type SOA] time to live, RFC 1035 4.1.3 (int)&lt;/li&gt;
          &lt;li&gt;“TYPE” – RR “SOA” or “TXT” (string), RFC 1035&lt;/li&gt;
          &lt;li&gt;“rt” – [optional] response time in milli seconds (float)&lt;/li&gt;
          &lt;li&gt;“size” – [optional] response size (int)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;resultset - [optional] an array of objects containing all the fields of a DNS result object, except for the fields: fw, from, msm_id, prb_id, and type. Available for queries sent to each local resolver.&lt;/li&gt;
  &lt;li&gt;“retry” – [optional] retry count (int)&lt;/li&gt;
  &lt;li&gt;“src_addr” – [optional] the source IP address added by the probe (string).&lt;/li&gt;
  &lt;li&gt;“subid” – [optional] sequence number of this result within a group of results, available if the resolution is done by the probe’s local resolver (int)&lt;/li&gt;
  &lt;li&gt;“submax” – [optional] total number of results within a group (int)&lt;/li&gt;
  &lt;li&gt;“timestamp” – start time, in Unix timestamp (int)&lt;/li&gt;
  &lt;li&gt;“type” – “dns” (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;notes&quot;&gt;Notes&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;If a hostname was provided, both the hostname (dst_name) and the IP address (dst_addr) will be in the response.&lt;/li&gt;
  &lt;li&gt;If an IP address was provided, the name field will not be filled, unless the address which was given differs from the probe’s resolution of the address. For instance, if “2001:0DB8:0:0::1” was provided, and the probe resolves it to “2001:0DB8::1”, the first value will be returned as the name and the second as the address.&lt;/li&gt;
  &lt;li&gt;The dst_addr field will always be present, except when there is an error.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;parsing-qbufabuf&quot;&gt;&lt;a href=&quot;https://atlas.ripe.net/docs/code/#decoding_dns_abuf&quot;&gt;Parsing “qbuf”/”abuf”&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;base64&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dns.message&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnsmsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_wire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b64decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'f2+AgAABAAEAAAAAA3d3dwRyaXBlA25ldAAAAQABwAwAAQABAAA3+gAEwQAGiw=='&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnsmsg&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32623&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUERY&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rcode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOERROR&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RA&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QUESTION&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ripe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ANSWER&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ripe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14330&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;193.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;6.139&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AUTHORITY&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADDITIONAL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;introduction-to-api&quot;&gt;&lt;a href=&quot;https://atlas.ripe.net/docs/api/v2/manual/overview/basic.html&quot;&gt;Introduction To API&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before doing anything, &lt;a href=&quot;https://atlas.ripe.net/keys/#&quot;&gt;signing up for an API key&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;a-basic-request&quot;&gt;A Basic Request&lt;/h3&gt;
&lt;h4 id=&quot;the-base-url&quot;&gt;The Base URL&lt;/h4&gt;
&lt;p&gt;The base URL of all calls to the RIPE Atlas APIs for this particular version is &lt;em&gt;https://atlas.ripe.net/api/v2/&lt;/em&gt;. You can append the name of the object type you want information from to form a URL. For example: &lt;em&gt;https://atlas.ripe.net/api/v2/measurements/&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A URL that contains information about one object or a series of objects is called a &lt;strong&gt;Resource&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Note that the API is only served over TLS.&lt;/p&gt;

&lt;p&gt;The object part of the URL should be plural and lower case. For example: &lt;em&gt;measurements&lt;/em&gt; and &lt;em&gt;probes&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&quot;example&quot;&gt;Example&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://atlas.ripe.net/api/v2/measurements/?page_size=3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;two-types-of-resources&quot;&gt;Two Types of Resources&lt;/h3&gt;
&lt;p&gt;A RIPE Atlas API can either return a list of objects or a single object in a response.&lt;/p&gt;

&lt;p&gt;We will refer to the first type as an Object List Resource. A URL that points to an Object List Resource generally has the form: &lt;em&gt;https://atlas.ripe.net/api/v2/&amp;lt; OBJECTNAME_PLURAL &amp;gt;/&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;An API resource that returns a single object will be called an Object Detail Resource. An Object Detail Resource URL usually has the form: &lt;em&gt;https://atlas.ripe.net/api/v2/&amp;lt; OBJECTNAME_PLURAL &amp;gt;/&amp;lt; OBJECT_ID &amp;gt;&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;object-list-resources&quot;&gt;Object List Resources&lt;/h4&gt;
&lt;p&gt;An Object List Resource will return one JSON object. This JSON object holds the fields count, next, previous and &lt;em&gt;results&lt;/em&gt;. This latter field is an array of JSON objects. Its URL will end with the name of the object type. For example: &lt;em&gt;https://atlas.ripe.net/api/v2/measurements/&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;results&lt;/em&gt; field will hold an array of objects. Each object contains a field &lt;em&gt;id *and a field *type&lt;/em&gt; that, together, are unique identifiers across all the RIPE Atlas APIs.&lt;/p&gt;

&lt;p&gt;You can add query parameters to the URI to filter object properties. You can also use query parameters to add additional fields to the objects, or remove fields from the objects. An example of a filter query parameter is &lt;em&gt;is_oneoff=true&lt;/em&gt;, while an example of a query parameter that would reduce the fields is &lt;em&gt;fields=id,country_code=gr&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A Resource that holds a request list will always be paginated. This means that the response to a single request will be broken down into separate responses if the number of objects requested exceeds 500. The details of this pagination are all in the &lt;em&gt;count&lt;/em&gt;, &lt;em&gt;next&lt;/em&gt; and &lt;em&gt;previous&lt;/em&gt; fields of the response. The response has a field count that lists the total number of objects found in RIPE Atlas. This &lt;em&gt;count&lt;/em&gt; field will never have a value higher than &lt;strong&gt;20,000&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;example-1&quot;&gt;Example&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://atlas.ripe.net/api/v2/probes/?page=10&amp;amp;sort=id
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;object-details&quot;&gt;Object details&lt;/h3&gt;
&lt;p&gt;An Object Details Resource returns exactly one JSON object.&lt;/p&gt;

&lt;p&gt;Like the List Resource, the object returned from the metadata API has a type and a id field that, together, are unique identifiers across RIPE Atlas.&lt;/p&gt;
&lt;h4 id=&quot;example-2&quot;&gt;Example&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://atlas.ripe.net/api/v2/probes/143/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;generic-query-parameters&quot;&gt;Generic Query Parameters&lt;/h3&gt;
&lt;p&gt;Every request to the RIPE Atlas API can be accompanied by one or more query parameters. This was already shown in the basic request featured. Some of the available query parameters are specific to a request, most notably query parameters that are used as filters on Object List Resources. For example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://atlas.ripe.net/api/v2/measurements/?status_name=Connected
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;unknown-query-parameters&quot;&gt;Unknown Query Parameters&lt;/h4&gt;
&lt;p&gt;The RIPE Atlas APIs will silently ignore any unknown query parameters. This means that using an invalid query parameter name will return a “regular” response.&lt;/p&gt;

&lt;h3 id=&quot;the-fields-and-optional_fields-query-parameters&quot;&gt;The &lt;em&gt;fields&lt;/em&gt; and &lt;em&gt;optional_fields&lt;/em&gt; Query Parameters&lt;/h3&gt;
&lt;p&gt;Every request to the RIPE Atlas APIs will always return the fields that constitute the unique identifier for that particular object. Generally that will be &lt;em&gt;id&lt;/em&gt; and &lt;em&gt;type&lt;/em&gt;. Some optional fields can also be added to the request. Every other field can be explicitly removed.&lt;/p&gt;

&lt;p&gt;The query parameters that allow this are the &lt;em&gt;fields&lt;/em&gt; and the &lt;em&gt;optional_fields&lt;/em&gt; parameters.&lt;/p&gt;

&lt;h4 id=&quot;fields&quot;&gt;fields&lt;/h4&gt;
&lt;p&gt;Let’s start with an example: &lt;em&gt;https://atlas.ripe.net/api/v2/probes/143/?fields=first_connected,status_since&lt;/em&gt; will return only the fields first_connected and status_since of the probe with ID 143.&lt;/p&gt;

&lt;h4 id=&quot;optional_fields&quot;&gt;optional_fields&lt;/h4&gt;
&lt;p&gt;Using the &lt;em&gt;optional_fields&lt;/em&gt; query parameter with a comma-separated list of field names means these fields will be appended to every requested object, next to the fields that are already there by default.&lt;/p&gt;

&lt;p&gt;For example, the request &lt;em&gt;https://atlas.ripe.net/api/v2/measurements/2000000/&lt;/em&gt; will not, by default, return the fields &lt;em&gt;participation_requests&lt;/em&gt; and &lt;em&gt;probes&lt;/em&gt;, mainly because these fields require extra calls to the back-end database and contain information that is not obviously needed. If you add &lt;em&gt;optional_fields=participation_requests&lt;/em&gt;,probes as a query parameter, however, you will see these two extra fields:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://atlas.ripe.net/api/v2/measurements/2000000/?optional_fields=participation_requests,probes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-page-and-page_size-query-parameters&quot;&gt;The &lt;em&gt;page&lt;/em&gt; and &lt;em&gt;page_size&lt;/em&gt; Query Parameters&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;page&lt;/em&gt; and &lt;em&gt;page_size&lt;/em&gt; query parameters are used in conjunction most of the time on requests that return object lists. The query parameter &lt;em&gt;page_size&lt;/em&gt; allows you to set the number of objects returned in one page, while page allows you to specify the page number you want to view, based on a specified number or the default &lt;em&gt;page_size&lt;/em&gt; of 100.&lt;/p&gt;

&lt;p&gt;The APIs use these query parameters themselves to construct links to the next and previous page of any list of objects. For example, if you request the URL:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://atlas.ripe.net/api/v2/measurements/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll see that the API returns a next field that contains a link with the query parameters ?page=2.&lt;/p&gt;

&lt;p&gt;There are some important things to note when using these query parameters:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Values over 500 on the query parameter page_size will be automatically limited to 500.&lt;/li&gt;
  &lt;li&gt;The product of the values page_size and page cannot be more than 20,000. A request higher than this limit will result in an HTTP error. See this page for information on how to overcome this limit.&lt;/li&gt;
  &lt;li&gt;Using the page and page_size parameters is meant to limit the size of the response as a convenience for users. Using many requests with small limits will not speed up (or slow down), the RIPE Atlas APIs. Using many small requests will, however, require more overhead on you network connection in comparison to one big request to RIPE Atlas.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;more-query-parameters&quot;&gt;More Query Parameters&lt;/h3&gt;
&lt;h4 id=&quot;minetrue&quot;&gt;mine=true&lt;/h4&gt;
&lt;p&gt;If you are logged in to RIPE Atlas, you can see objects that you own by passing the query parameter &lt;em&gt;mine=true&lt;/em&gt; for measurement objects.&lt;/p&gt;

&lt;h4 id=&quot;sort&quot;&gt;sort&lt;/h4&gt;
&lt;p&gt;This query parameter will order the results by the field name that is given as the value, e.g. &lt;em&gt;sort=-id&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&quot;key&quot;&gt;key&lt;/h4&gt;
&lt;p&gt;The key parameter allows you to authenticate and authorise yourself to the RIPE Atlas APIs. The actual key can be generated by you if you have a RIPE Atlas account, or if somebody gave you one.&lt;/p&gt;

&lt;h3 id=&quot;authentication&quot;&gt;Authentication&lt;/h3&gt;
&lt;p&gt;As mentioned in the overview, there are two methods to authenticate to RIPE Atlas and you can use most of our APIs unauthenticated (i.e. as an anonymous user).&lt;/p&gt;

&lt;p&gt;The two authentication methods are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use an API key. This is the preferred way of authentication to the APIs.&lt;/li&gt;
  &lt;li&gt;Use a session-based cookie. This is primarily used for client-side JavaScript in web browsers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;api-keys&quot;&gt;API Keys&lt;/h3&gt;
&lt;p&gt;The preferred and most convenient method to authenticate to RIPE Atlas is to use API keys.&lt;/p&gt;

&lt;p&gt;The user who created the API key is referred to by RIPE Atlas as the creator of the key. Key permissions can never be greater than those of the creator. This also means that key permissions can be lowered when the creator’s permissions are lowered.&lt;/p&gt;

&lt;p&gt;API keys can be used used in the RIPE Atlas APIs in one of two ways:&lt;/p&gt;

&lt;p&gt;by passing them in as query parameters in a web request:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://atlas.ripe.net/api/v2/measurements/?key=1233-3434-4556-565
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;by including the key in the Authorization header, e.g. with curl:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Authorization: Key 1233-3434-4556-565&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://atlas.ripe.net/api/v2/measurements/&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;notes-regarding-403&quot;&gt;Notes Regarding 403&lt;/h4&gt;
&lt;p&gt;A 403 Forbidden error will response will be returned if:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the API key does not provide the required permission;&lt;/li&gt;
  &lt;li&gt;the API key does not exist;&lt;/li&gt;
  &lt;li&gt;the API key is either not enabled or is outside of the defined valid from to valid to time range;
multiple API keys are presented using either multiple “key=” parameters, or a combination of “key=” parameters and the “Authorization” header.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ripe-atlas-result-streams&quot;&gt;RIPE Atlas Result Streams&lt;/h3&gt;
&lt;p&gt;RIPE Atlas has been providing downloadable results since the very beginning of the project. This works well if you know what time frame you’re interested in, and want to get the data collected during that period.&lt;/p&gt;

&lt;p&gt;The streaming data service allows you to tap into the real-time data flow of all the collected public results. Every time our system receives a data point or a probe connectivity event occurs, it’s also delivered to the clients who are “tuned in” to that result stream. This feature is implemented using &lt;a href=&quot;https://en.wikipedia.org/wiki/WebSocket&quot;&gt;WebSockets&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;highlights&quot;&gt;Highlights&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;This service is in prototype status. We’re observing how our system reacts to the streams provided to users in order to evaluate the feasibility and usefulness of a production service.&lt;/li&gt;
  &lt;li&gt;Streaming uses the Socket.IO protocol over WebSockets for real-time event-based communication.&lt;/li&gt;
  &lt;li&gt;You can only subscribe (“tune in”) to results delivered by public measurements.&lt;/li&gt;
  &lt;li&gt;You can subscribe to the connectivity events of any probe.&lt;/li&gt;
  &lt;li&gt;We’re inviting the community to check out the gallery of visualisations provided by the RIPE Atlas team and our users as soon as it becomes available, and to come up with new visualisations and/or to enhance existing ones&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;more-info-on-streaming&quot;&gt;&lt;a href=&quot;https://atlas.ripe.net/docs/api/v2/manual/measurements/result-streaming.html&quot;&gt;More Info On Streaming&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;More information on streaming can be found here&lt;/p&gt;

&lt;h2 id=&quot;using-apis-for-measurement&quot;&gt;&lt;a href=&quot;https://atlas.ripe.net/docs/api/v2/manual/object_documentation.html&quot;&gt;Using APIs For Measurement&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A &lt;em&gt;Measurement&lt;/em&gt; in the context of the RIPE Atlas APIs is an object holding information about one measurement (called a “one-off” measurement) or a series of measurements performed by one or more probes on the RIPE Atlas network. The response of a single measurement performed by a single probe is called a &lt;em&gt;measurement result&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If we look at the information returned in more detail we can discern:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Measurement metadata: the ID and the measurement type and information on the selected probes, including whether this is a public measurement.&lt;/li&gt;
  &lt;li&gt;Attributes of the measurement specification, i.e. the attributes that a probe needs to start performing measurements.&lt;/li&gt;
  &lt;li&gt;Status information of the measurement. E.g. Is it running? When was it started?, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;type-of-information&quot;&gt;Type of Information&lt;/h3&gt;
&lt;h4 id=&quot;metadata&quot;&gt;Metadata&lt;/h4&gt;
&lt;p&gt;A &lt;em&gt;Measurement&lt;/em&gt; object holds information about the measurement itself. First it holds the fields &lt;em&gt;id&lt;/em&gt; and the &lt;em&gt;type&lt;/em&gt; that, together, provide a unique identifier for the measurement object. Examples of measurement types are &lt;em&gt;HTTP&lt;/em&gt; and Traceroute.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;participation requests&lt;/em&gt; array holds a list of &lt;em&gt;participation request&lt;/em&gt; objects, which describe the probe selection criteria that were made for this measurement. You can read more about the particapation request object &lt;a href=&quot;https://atlas.ripe.net/docs/api/v2/manual/participation_requests.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please note that this is not the same as the actual probes that are appointed to a measurement by RIPE Atlas. The latter would be part of the status information of the measurement in a object called &lt;em&gt;probes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Finally, there are some fields that describe some of the measurement’s general properties. They are &lt;em&gt;is_public&lt;/em&gt; and &lt;em&gt;result&lt;/em&gt;, a URL that points to the result of the measurements as performed by the selected probes.&lt;/p&gt;

&lt;h4 id=&quot;the-measurement-specification&quot;&gt;The Measurement Specification&lt;/h4&gt;
&lt;p&gt;The &lt;em&gt;Measurement&lt;/em&gt; object holds the measurement’s settings, called the “measurement specification” in RIPE Atlas terminology. This specification is a mixture of base attributes, available for all types of measurements and type-specific attributes. Examples of such attributes are &lt;em&gt;packets&lt;/em&gt;, &lt;em&gt;method&lt;/em&gt; or &lt;em&gt;interval&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The measurement specification is the object that is sent to a specific probe to perform its measurement.&lt;/p&gt;

&lt;p&gt;You can see an exhaustive list of all measurement specification attributes for all kinds of measurements &lt;a href=&quot;https://atlas.ripe.net/docs/api/v2/reference/#!/measurements/Measurement_List_GET&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;status-information&quot;&gt;Status Information&lt;/h4&gt;
&lt;p&gt;A &lt;em&gt;Measurement&lt;/em&gt; object also holds the information about the time series of measurements to be performed by the probes, like the start and stop time of the measurements and the link to the streaming API resource that holds the result of the performed measurements.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;Measurement&lt;/em&gt; object also holds information about the status of the measurement, e.g. if it is currently running, stopped, etc.&lt;/p&gt;

&lt;p&gt;Finally, the &lt;em&gt;Measurement&lt;/em&gt; object holds information about the actual probes used in the measurement. This information is in an object called &lt;em&gt;probes&lt;/em&gt;. &lt;strong&gt;This is an optional field, which can be enabled by using the optional_fields=probes query parameter.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;measurement-query-parameters&quot;&gt;Measurement Query Parameters&lt;/h3&gt;
&lt;p&gt;Most of the generic query parameters apply to requests for measurement objects. You can use &lt;em&gt;page&lt;/em&gt; and &lt;em&gt;page_size&lt;/em&gt; to manipulate the number of objects and the pagination; you can use &lt;em&gt;fields&lt;/em&gt; and &lt;em&gt;optional_fields&lt;/em&gt; to set the fields you want in the response, and so on.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://atlas.ripe.net/docs/api/v2/manual/overview/generic_query_parameters.html&quot;&gt;here&lt;/a&gt; for more information on these.&lt;/p&gt;

&lt;h4 id=&quot;field-filters&quot;&gt;Field Filters&lt;/h4&gt;
&lt;p&gt;You can filter on most responses that are included in a typical response for measurement objects. Fields like id, target_name, etc. can be used directly as filters:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://atlas.ripe.net/api/v2/measurements/?id=2000000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For some fields, it is also possible to enter a range filter, i.e. a filter that selects a range specified by a list, or by a lower and an upper limit.&lt;/p&gt;

&lt;p&gt;These range filters have special syntax for their query parameters.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;list range filter&lt;/strong&gt; uses the syntax &lt;em&gt;?&amp;lt; FIELDNAME &amp;gt;__in=item1,item2&lt;/em&gt;. An example is:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://atlas.ripe.net/api/v2/measurements/?id__in=2000000,2000001,2000002
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The limit range filter uses the syntax appended with either &lt;em&gt;__gte&lt;/em&gt;, &lt;em&gt;__gt&lt;/em&gt;, &lt;em&gt;__lte&lt;/em&gt; or &lt;em&gt;__lt&lt;/em&gt;. As mentioned earlier on gt and gte refer to greater than and greater than or equal. You can combine multiple query parameters to set upper and lower limits:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://atlas.ripe.net/api/v2/measurements/?id__gte=2000000&amp;amp;id__lte=2000010
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;api-references&quot;&gt;API References&lt;/h4&gt;
&lt;p&gt;A full list of all available fields and query parameters is available &lt;a href=&quot;https://atlas.ripe.net/docs/api/v2/manual/measurements/queryparameters.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;creating-measurements&quot;&gt;Creating Measurements&lt;/h3&gt;
&lt;p&gt;Measurement creation is managed based on the premise of having to submit as little information as possible while still obtaining something useful. With that said, even the simplest measurement requires a rather large amount of information to initiate things. You will need to compose a measurement definition that has at least the &lt;em&gt;type&lt;/em&gt;, &lt;em&gt;af&lt;/em&gt;, &lt;em&gt;description&lt;/em&gt; and &lt;em&gt;target&lt;/em&gt; fields, as well as a &lt;em&gt;probes&lt;/em&gt; object telling us which probes you want to use for the measurement.&lt;/p&gt;

&lt;p&gt;If you omit the &lt;em&gt;start_time&lt;/em&gt;, we assume you want it started right away; if you don’t set the &lt;em&gt;is_oneoff&lt;/em&gt; flag, we assume it must be a regular measurement, and so on.&lt;/p&gt;

&lt;p&gt;You will also have to use a valid &lt;em&gt;key&lt;/em&gt; with the right permissions.&lt;/p&gt;

&lt;p&gt;If you do want to create measurements, you must use &lt;strong&gt;a tool that is able to send POST requests&lt;/strong&gt; with a payload to RIPE Atlas. Three such tools are postman (a plug-in for Chrome), HttpRequester (a plugin for Firefox) and cURL (a command-line tool).&lt;/p&gt;

&lt;h4 id=&quot;structure&quot;&gt;Structure&lt;/h4&gt;
&lt;p&gt;Our measurement REST API uses a JSON payload with a POST verb to create new measurements.&lt;/p&gt;

&lt;p&gt;You can fill in one or more measurement &lt;em&gt;definitions&lt;/em&gt;, one or more &lt;em&gt;probes&lt;/em&gt; objects, and some fields that are applicable to all measurements you want to create.&lt;/p&gt;

&lt;h4 id=&quot;the-response&quot;&gt;The Response&lt;/h4&gt;
&lt;p&gt;The response to any successful POST request will return an object that has one field called &lt;em&gt;measurements&lt;/em&gt;. This field holds an array that contains the IDs of the created measurements. The array reflects the order in which they were specified in the &lt;em&gt;definitions&lt;/em&gt; list of you request.&lt;/p&gt;

&lt;h3 id=&quot;simple-example&quot;&gt;Simple Example&lt;/h3&gt;
&lt;p&gt;Let’s begin with an example. Assume we want to create a simple ping measurement from &lt;em&gt;1&lt;/em&gt; probes anywhere in the world to &lt;em&gt;ripe.net&lt;/em&gt;. We also want it to be &lt;em&gt;one_off&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Here’s how to do this in python:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Reference: https://stackoverflow.com/questions/9746303/how-do-i-send-a-post-request-as-a-json/26876308#26876308&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# importing the requests library &lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;# api-endpoint &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://atlas.ripe.net/api/v2/measurements/?key=&amp;lt;your key&amp;gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# defining a params dict for the parameters to be sent to the API &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;body_in_json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;definitions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ripe.net&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;My Third Measurement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ping&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;af&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;is_oneoff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;probes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;requested&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;area&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;WW&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;bill_to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;e7liu@eng.ucsd.edu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# Define headers&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Content-type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'application/json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Accept'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'application/json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# sending get request and saving the response as response object &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body_in_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# extracting data in json format &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you have filled out everything correctly, you will get a response like this:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;measurements&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23021613&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you didn’t use the right key, or no key at all, you will get an error:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;403&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;detail&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Authentication credentials were not provided.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Forbidden&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you made a mistake in the entry of the payload, you will get the following error:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;detail&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Invalid input. Please check the documentation.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Bad Request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-definition-array&quot;&gt;The &lt;em&gt;definition&lt;/em&gt; Array&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;definitions&lt;/em&gt; array holds single objects, which we will refer to as measurement definitions.&lt;/p&gt;

&lt;p&gt;A measurement definition has a similar structure to a &lt;em&gt;measurement specification&lt;/em&gt;. The &lt;em&gt;measurement specification&lt;/em&gt;, as you might recall, is the collection of measurement settings that a probe needs to perform a measurement. There are some base attributes and some type-specific attributes in the specification.&lt;/p&gt;

&lt;p&gt;A measurement definition is a sub-set of the measurement specification. There are some required fields, but most are optional. RIPE Atlas will fill out the missing fields with defaults for all non-required fields. Which fields are required differs per measurement type.&lt;/p&gt;

&lt;p&gt;These are the required fields for all measurement types:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;description: An arbitrary string you will use to refer to this measurement.&lt;/li&gt;
  &lt;li&gt;type: One of ping,traceroute,dns, sslcert or ntp&lt;/li&gt;
  &lt;li&gt;af: The address family. It must be either 4 or 6.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;em&gt;target&lt;/em&gt; field denotes the target of a measurement and is special because it is required for all measurement types except DNS measurements.&lt;/p&gt;

&lt;h4 id=&quot;note&quot;&gt;Note&lt;/h4&gt;
&lt;p&gt;You can use GUI to generate JSON files which could be used directly in replace of the &lt;em&gt;body_in_json&lt;/em&gt; part.&lt;/p&gt;

&lt;h3 id=&quot;base-attributes&quot;&gt;Base Attributes&lt;/h3&gt;
&lt;p&gt;A measurement definition contains a few base properties, and a myriad of type-specific options. For example, while all definitions have an &lt;em&gt;af&lt;/em&gt; property, only traceroute measurements have a &lt;em&gt;paris&lt;/em&gt; property.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/base_property.png&quot; alt=&quot;Base Properties&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;type-specific-attributes&quot;&gt;Type Specific Attributes&lt;/h3&gt;
&lt;h4 id=&quot;dns-1&quot;&gt;DNS&lt;/h4&gt;
&lt;p&gt;Aside from the base attributes that must be present in any request to create a measurement, there are specific attributes required for each measurement type.&lt;/p&gt;

&lt;p&gt;We are mentioning only the required fields for every type. An exhaustive reference of all attributes that can be used are listed &lt;a href=&quot;https://atlas.ripe.net/docs/api/v2/reference&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/DNS_Attributes.png&quot; alt=&quot;Base Properties&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-full-example&quot;&gt;A Full Example&lt;/h3&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;definitions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;www.ripe.net&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;My Complex Measurement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;traceroute&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;af&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;resolve_on_probe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;is_public&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;packets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;protocol&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ICMP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;paris&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;firsthop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;interval&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;is_oneoff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;www.ripe.net&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;My Complex Measurement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ping&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;af&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;resolve_on_probe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;is_public&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;probes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;requested&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;area&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;WW&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;requested&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;country&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GR&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;requested&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;country&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CA&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;requested&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;probes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;252&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;requested&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;udm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000002&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start_time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1461807395&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stop_time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2018-01-01T12:00:00Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;is_oneoff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;stop-measurement&quot;&gt;Stop Measurement&lt;/h3&gt;
&lt;p&gt;Measurements can be stopped by sending a &lt;em&gt;DELETE&lt;/em&gt; verb to the URL of the measurement you want to stop. For example, if you want to stop the measurement with &lt;em&gt;msm_id&lt;/em&gt;2034345, you will have to send a DELETE verb to:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://atlas.ripe.net/api/v2/measurements/2034305
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can only stop measurements that you’ve created yourself or that you have an API key for (and which has permissions to stop measurements). In the first case, you will have to be logged in with a session-based cookie.&lt;/p&gt;

&lt;h3 id=&quot;latest-measurement-results-api&quot;&gt;Latest Measurement Results API&lt;/h3&gt;
&lt;p&gt;The latest measurement results API can be found here:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://atlas.ripe.net/api/v2/measurements/2000000/latest/?probe_ids=10008
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;An example code:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# importing the requests library &lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;# api-endpoint &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://atlas.ripe.net/api/v2/measurements/23020975/latest/?key=&amp;lt;YOUR KEY&amp;gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Define headers&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Content-type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'application/json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Accept'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'application/json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# sending get request and saving the response as response object &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# extracting data in json format &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;output-format&quot;&gt;Output Format&lt;/h4&gt;
&lt;p&gt;The output format is only slightly different from what you’d expect from the standard measurement result API call. Rather than simply dumping every result as a list, it returns a series of key/value pairs in the format:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  probe_id: [&amp;lt;result&amp;gt;],
  probe_id: [&amp;lt;result&amp;gt;],
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This allows you to easily fetch the latest result from probe &lt;em&gt;123&lt;/em&gt;, for example, by using:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;my_data[&quot;123&quot;][0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;filtering&quot;&gt;Filtering&lt;/h4&gt;
&lt;p&gt;You can also do basic filtration by probe id simply by using &lt;em&gt;probe_ids=probe_id,probe_id&lt;/em&gt; as query parameters.&lt;/p&gt;

&lt;p&gt;Note, however, that if you specify a probe ID that is not part of the measurement, you’ll simply get back an empty set.&lt;/p&gt;

&lt;h3 id=&quot;status-check&quot;&gt;Status Check&lt;/h3&gt;
&lt;p&gt;If you just want to get started using status checks, you simply need to do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a RIPE Atlas ping measurement using either the website or the API.
    &lt;ul&gt;
      &lt;li&gt;You may use up to 1,024 probes.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;Note the newly-created measurement ID&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Go to: &lt;em&gt;https://atlas.ripe.net/api/v2/measurements/&amp;lt; measurement-id &amp;gt;&lt;/em&gt; where &lt;em&gt;&amp;lt; measurement-id &amp;gt;&lt;/em&gt; is the ID from your newly created measurement. If the measurement in question is not public, you’ll need to include an API &lt;em&gt;?key=argument&lt;/em&gt;.
    &lt;ul&gt;
      &lt;li&gt;A new version is available using the link: &lt;em&gt;https://atlas.ripe.net/api/v2/measurements/&amp;lt; measurement-id &amp;gt;/status-check&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Go to the URL again later to check whether anything has changed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Define your alerts accordingly.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An exmaple code:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;# api-endpoint &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://atlas.ripe.net/api/v2/measurements/23020975/&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Define headers&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Content-type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'application/json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Accept'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'application/json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# sending get request and saving the response as response object &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# extracting data in json format &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Enze Liu</name></author><category term="notes" /><summary type="html">RIPE Atlas Reference: Atlas About User-Defined Measurements API Manual v2 What is RIPE Atlas? RIPE Atlas is a global network of probes that measure Internet connectivity and reachability. There are thousands of active probes in the RIPE Atlas network, and it is continually growing. The RIPE NCC collects data from this network and provides Internet maps, data tools and visualisations based on the aggregated results. RIPE Atlas users who host a probe can also use the entire RIPE Atlas network to conduct customised measurements that provide valuable data about their own network. What Can I Do With RIPE Atlas? monitor network reachability from thousands of vantage points around the globe Check the responsiveness of DNS infrastructure, such as root name servers. How RIPE Collect Data RIPE Atlas probes are small, USB-powered hardware devices that hosts attach to an Ethernet port on their router via a network (UTP) cable. Definition in RIPE Atlas Community The RIPE Atlas community is made up of users, hosts, sponsors and ambassadors. Anyone who accesses RIPE Atlas maps and statistics, which are open and available to the public, is considered a RIPE Atlas user. A host is anyone who connects a probe or anchor to their own network. Hosts can conduct their own customised measurements in order to gain valuable information about their network using other RIPE Atlas probes. A sponsor is an individual or organisation that financially supports RIPE Atlas. An ambassador is someone who helps us distribute RIPE Atlas probes. RIPE NCC members can also take advantage of special RIPE Atlas features, even if they do not host a probe. Vision With RIPE Atlas, the RIPE NCC hopes to create the world’s largest Internet measurement network. Creating Your Own Measurements The creation process consists of three steps: Definitions, Probe selection and Timing. In the definitions section, you can select the types of measurements you would like to schedule, with the UI showing some configurable parameters, such as the target. An extra panel at the bottom of the page shows you the real-time, API-compatible specification, which can be used to learn how to create measurements directly through the API. Measurement Types The available user-defined measurement (UDM) types are “Ping”, “Traceroute”, “DNS” and “SSL”. “HTTP” measurements are also technically possible but are restricted to researchers and other interested users on a case-by-case basis. Following is a list of measurement types and related parameters. Ping Address Family - Select whether you want to use IPv4 or IPv6. Packets - The number of packets that should be sent in each ping. Size - The size of the packets that are sent. Description - Allows you to give the measurement a description to help you identify it. Interval - The number of seconds each probe participating in the measurement will wait before attempting to perform the measurement again. A drop-down list will suggest some common options. Spread – This distributes the start time of the probes’ measurements throughout the interval so that they are more evenly spaced. If spread is not specified, it will default to half of the interval, with a maximum of 400 seconds. DNS Address Family - Select whether you want to use IPv4 or IPv6. Query Class - Specify if the query will be performed in the IN or CHAOS domain space. Query Type - The type of DNS query to be performed. Query Argument - The domain name (or IP address, in the case of reverse DNS) to look up. Description - Allows you to give the measurement a description to help you identify it. Interval - The number of seconds each probe participating in the measurement will wait before attempting to perform the measurement again. Spread – This distributes the start time of the probes’ measurements throughout the interval so that they are more evenly spaced. If spread is not specified, it will default to half of the interval, with a maximum of 400 seconds. Set DNSSEC OK Flag - Enable DNSSEC DO bit (RFC-3225). Default is off Recursion desired - Enable recursion. This is the RD flag described in RFC1035. Use Probe’s Resolver - Ese the probe’s list of local resolvers instead of specifying a target to use as the resolver. Protocol - The protocol to use. Retry Times - Number of attempts. UDP Payload Size - The maximum reply size accepted. This field is described in RFC2671. Include the Qbuf - Include a base64 encoded version of the queries made by the probe. Exclude the Abuf - Exclude the full base64 encoded answer. Prepend the Probe’s ID - Each probe prepends its probe number and a timestamp to the DNS query argument to make it unique Use NSID - Include DNS nameserver identifier option (RFC5001) Spread Spread can be set under “Advanced Options” in Step 1 when creating a new measurement using the web interface, and is also available via the API. Spread creates a distribution of individual measurements throughout the measurement interval, rather than clustering the measurements as closely together as possible. In this way, spread helps to avoid overloading targets with bursts of measurements and creates a more steady flow of packets. For example, if you use 60 probes for a measurement that is scheduled to take place every 240 seconds without any spread, all 60 probes would perform their measurement at nearly the same time, every 240 seconds. With a spread of 240 seconds, the probes will be assigned random start times throughout each interval. In this example, this would average out to one measurement every four seconds. The fewer the number of probes, the less uniform the distribution will be throughout the interval, since the probes are distributed randomly. However, the probes will stick to the specified frequency, so their distribution will remain the same from one interval to the next. Probe Selection The second step of the wizard helps select the probes that will participate in the UDM. By default, 50 probes worldwide are randomly selected, allowing you to skip this step if you like. You can specify a set of probes already used in a previously scheduled measurement or a new set of probes, either manually or through the probe selection wizard. The selections are displayed in an editable list. Timing The third screen of the UDM wizard allows you to select the measurement’s start and stop times. The fields are Start and End time. You can also specify whether it is a One-off measurement. One-off One-off measurements, as the name suggests, execute only once. What makes them really attractive is the fact that they are near real time; results are delivered a few seconds (generally 8-10) after specifying the measurement. This makes one-offs an ideal tool for looking into network problems that are perceived “now”. If this option is selected, you can specify only the Start time. Start For the measurement start time, you can choose between ‘as soon as possible’ or a specific date and time (in UTC). End The measurement’s end time can be ‘never’ (which means it won’t stop until you manually stop it) or a specific date and time (in UTC). Once your measurement is submitted and accepted, you can immediately see it in your measurement list, and can check its results. Measurement Statuses Each measurement has a status, defined as one of these: Specified: The measurement has been defined and sent to our infrastructure to be relayed to the probes. Scheduled: The measurement has been relayed to the probes. If the start time is immediate, this status doesn’t last very long. Ongoing: The measurement is running on available probes. Stopped: The measurement was stopped either on schedule, by the user requesting an early stop. Forced to Stop: The measurement was killed prematurely due to a lack of available credits. No suitable probes: The measurement cannot currently be executed as defined due to a lack of available probes. This may be because you asked to use probes that don’t exist (for example, probes in an AS in which there are no probes) or because all of the probes you requested were too busy to take on new jobs. This latter scenario is very rare however. Failed: If a probe never actually runs a single measurement over the duration of the specified start/stop time (typically due to a lack of available probes), it will be marked as Failed once the stop time has been reached. In other words, Specified, Scheduled, Ongoing, and No suitable probes are statuses potentially assigned to running measurements (or at least those who may return results at some point), while Stopped, Forced to Stop, and Failed are assigned to measurements that will not be returning any more results. Rate Limits The following rate limits apply for users/measurements: No more than 100 simultaneous measurements No more than 1000 probes may be used per measurement No more than 100,000 results can be generated per day No more than 50 measurement results per second per measurement. This is calculated as the spread divided by the number of probes. No more than 1,000,000 credits may be used each day No more than 25 ongoing and 25 one-off measurements of the same type running against the same target at any time Cost The cost for the individual result depends on what type of measurement you conduct, and what options and flags were specified. The following sections describe the current settings. One-off measurement result is twice as expensive. Ping and ping6 Unit cost = N * (int(S/1500) + 1) DNS and DNS6 Unit cost for UDP: 10 credits/result Unit cost for TCP: 20 credits/result Querying Results For DNS An example result of a DNS Lookup: { &quot;af&quot;:6, &quot;dst_addr&quot;:&quot;2001:7fd::1&quot;, &quot;from&quot;:&quot;2001:67c:2e8:ffe2:220:4aff:fec6:cc9d&quot;, &quot;fw&quot;:4790, &quot;lts&quot;:38, &quot;msm_id&quot;:11001, &quot;msm_name&quot;:&quot;Tdig&quot;, &quot;prb_id&quot;:9, &quot;proto&quot;:&quot;UDP&quot;, &quot;result&quot;: { &quot;ANCOUNT&quot;:1, &quot;ARCOUNT&quot;:8, &quot;ID&quot;:20790, &quot;NSCOUNT&quot;:13, &quot;QDCOUNT&quot;:1, &quot;abuf&quot;:&quot;UTaEAAABAAEADQAIAAAGAAEAAAYAAQABUYAAQAFhDHJvb3Qtc2VydmVycwNuZXQABW5zdGxkDHZlcmlzaWduLWdycwNjb20AeDo7WQAABwgAAAOEAAk6gAABUYAAAAIAAQAH6QAAAsAcAAACAAEAB+kAAAQBYsAeAAACAAEAB+kAAAQBY8AeAAACAAEAB+kAAAQBZMAeAAACAAEAB+kAAAQBZcAeAAACAAEAB+kAAAQBZsAeAAACAAEAB+kAAAQBZ8AeAAACAAEAB+kAAAQBaMAeAAACAAEAB+kAAAQBacAeAAACAAEAB+kAAAQBasAeAAACAAEAB+kAAAQBa8AeAAACAAEAB+kAAAQBbMAeAAACAAEAB+kAAAQBbcAewBwAHAABAAfpAAAQIAEFA7o+AAAAAAAAAAIAMMB0ABwAAQAH6QAAECABBQACAAAAAAAAAAAAAAvAgwAcAAEAB+kAABAgAQUAAAIAAAAAAAAAAAAMwJIAHAABAAfpAAAQIAEFAAAtAAAAAAAAAAAADcChABwAAQAH6QAAECABBQAAqAAAAAAAAAAAAA7AsAAcAAEAB+kAABAgAQUAAC8AAAAAAAAAAAAPwL8AHAABAAfpAAAQIAEFAAASAAAAAAAAAAANDcDOABwAAQAH6QAAECABBQAAAQAAAAAAAAAAAFM=&quot;, &quot;answers&quot;: [ { &quot;MNAME&quot;:&quot;a.root-servers.net.&quot;, &quot;NAME&quot;:&quot;.&quot;, &quot;RNAME&quot;:&quot;nstld.verisign-grs.com.&quot;, &quot;SERIAL&quot;:2017082201, &quot;TTL&quot;:86400, &quot;TYPE&quot;:&quot;SOA&quot; } ], &quot;rt&quot;:6.715, &quot;size&quot;:509 }, &quot;src_addr&quot;:&quot;2001:67c:2e8:ffe2:220:4aff:fec6:cc9d&quot;, &quot;timestamp&quot;:1503447622, &quot;type&quot;:&quot;dns&quot; } Data Structure Documentation “af” – [optional] IP version: “4” or “6” (int) “bundle” – [optional] instance ID for a collection of related measurement results (int) “dst_addr” – [optional] IP address of the destination (string) “dst_name” – [optional] hostname of the destination (string) “error” – [optional] error message (object with the following fields:) “timeout” – query timeout (int) “getaddrinfo” – error message (string) “from” – [optional] IP address of the source (string) “group_id” – [optional] If the measurement belongs to a group of measurements, the identifier of the group (int) “lts” – last time synchronised. How long ago (in seconds) the clock of the probe was found to be in sync with that of a controller. The value -1 is used to indicate that the probe does not know whether it is in sync (int) “msm_id” – measurement identifier (int) “msm_name” – measurement type “Tdig” (string) “prb_id” – source probe ID (int) “proto” – “TCP” or “UDP” (string) “qbuf” – [optional] query payload buffer which was sent to the server, base64 encoded (string) “result” – [optional] response from the DNS server (object with the following fields:) “ANCOUNT” – answer count, RFC 1035 4.1.1 (int) “ARCOUNT” – additional record count, RFC 1035, 4.1.1 (int) “ID” – query ID, RFC 1035 4.1.1 (int) “NSCOUNT” – name server count (int) “QDCOUNT” – number of queries (int) “abuf” – answer payload buffer from the server, base64 encoded (string) “answers” – first two records from the response decoded by the probe, if they are TXT or SOA; other RR can * be decoded from “abuf” (array of objects) objects have the following fields: “MNAME” – domain name, RFC 1035, 3.1.13 (string) “NAME” – domain name. (string) “RDATA” – [type TXT] txt value (list of strings) “RNAME” – [if type SOA] mailbox, RFC 1035 3.3.13 (string) “SERIAL” – [type SOA] zone serial number, RFC 1035 3.3.13 (int) “TTL” – [type SOA] time to live, RFC 1035 4.1.3 (int) “TYPE” – RR “SOA” or “TXT” (string), RFC 1035 “rt” – [optional] response time in milli seconds (float) “size” – [optional] response size (int) resultset - [optional] an array of objects containing all the fields of a DNS result object, except for the fields: fw, from, msm_id, prb_id, and type. Available for queries sent to each local resolver. “retry” – [optional] retry count (int) “src_addr” – [optional] the source IP address added by the probe (string). “subid” – [optional] sequence number of this result within a group of results, available if the resolution is done by the probe’s local resolver (int) “submax” – [optional] total number of results within a group (int) “timestamp” – start time, in Unix timestamp (int) “type” – “dns” (string) Notes If a hostname was provided, both the hostname (dst_name) and the IP address (dst_addr) will be in the response. If an IP address was provided, the name field will not be filled, unless the address which was given differs from the probe’s resolution of the address. For instance, if “2001:0DB8:0:0::1” was provided, and the probe resolves it to “2001:0DB8::1”, the first value will be returned as the name and the second as the address. The dst_addr field will always be present, except when there is an error. Parsing “qbuf”/”abuf” &amp;gt;&amp;gt;&amp;gt; import base64 &amp;gt;&amp;gt;&amp;gt; import dns.message &amp;gt;&amp;gt;&amp;gt; dnsmsg = dns.message.from_wire(base64.b64decode('f2+AgAABAAEAAAAAA3d3dwRyaXBlA25ldAAAAQABwAwAAQABAAA3+gAEwQAGiw==')) &amp;gt;&amp;gt;&amp;gt; print dnsmsg id 32623 opcode QUERY rcode NOERROR flags QR RA ;QUESTION www.ripe.net. IN A ;ANSWER www.ripe.net. 14330 IN A 193.0.6.139 ;AUTHORITY ;ADDITIONAL Introduction To API Before doing anything, signing up for an API key. A Basic Request The Base URL The base URL of all calls to the RIPE Atlas APIs for this particular version is https://atlas.ripe.net/api/v2/. You can append the name of the object type you want information from to form a URL. For example: https://atlas.ripe.net/api/v2/measurements/ A URL that contains information about one object or a series of objects is called a Resource. Note that the API is only served over TLS. The object part of the URL should be plural and lower case. For example: measurements and probes. Example https://atlas.ripe.net/api/v2/measurements/?page_size=3 Two Types of Resources A RIPE Atlas API can either return a list of objects or a single object in a response. We will refer to the first type as an Object List Resource. A URL that points to an Object List Resource generally has the form: https://atlas.ripe.net/api/v2/&amp;lt; OBJECTNAME_PLURAL &amp;gt;/ An API resource that returns a single object will be called an Object Detail Resource. An Object Detail Resource URL usually has the form: https://atlas.ripe.net/api/v2/&amp;lt; OBJECTNAME_PLURAL &amp;gt;/&amp;lt; OBJECT_ID &amp;gt; Object List Resources An Object List Resource will return one JSON object. This JSON object holds the fields count, next, previous and results. This latter field is an array of JSON objects. Its URL will end with the name of the object type. For example: https://atlas.ripe.net/api/v2/measurements/ The results field will hold an array of objects. Each object contains a field id *and a field *type that, together, are unique identifiers across all the RIPE Atlas APIs. You can add query parameters to the URI to filter object properties. You can also use query parameters to add additional fields to the objects, or remove fields from the objects. An example of a filter query parameter is is_oneoff=true, while an example of a query parameter that would reduce the fields is fields=id,country_code=gr. A Resource that holds a request list will always be paginated. This means that the response to a single request will be broken down into separate responses if the number of objects requested exceeds 500. The details of this pagination are all in the count, next and previous fields of the response. The response has a field count that lists the total number of objects found in RIPE Atlas. This count field will never have a value higher than 20,000. Example https://atlas.ripe.net/api/v2/probes/?page=10&amp;amp;sort=id Object details An Object Details Resource returns exactly one JSON object. Like the List Resource, the object returned from the metadata API has a type and a id field that, together, are unique identifiers across RIPE Atlas. Example https://atlas.ripe.net/api/v2/probes/143/ Generic Query Parameters Every request to the RIPE Atlas API can be accompanied by one or more query parameters. This was already shown in the basic request featured. Some of the available query parameters are specific to a request, most notably query parameters that are used as filters on Object List Resources. For example: https://atlas.ripe.net/api/v2/measurements/?status_name=Connected Unknown Query Parameters The RIPE Atlas APIs will silently ignore any unknown query parameters. This means that using an invalid query parameter name will return a “regular” response. The fields and optional_fields Query Parameters Every request to the RIPE Atlas APIs will always return the fields that constitute the unique identifier for that particular object. Generally that will be id and type. Some optional fields can also be added to the request. Every other field can be explicitly removed. The query parameters that allow this are the fields and the optional_fields parameters. fields Let’s start with an example: https://atlas.ripe.net/api/v2/probes/143/?fields=first_connected,status_since will return only the fields first_connected and status_since of the probe with ID 143. optional_fields Using the optional_fields query parameter with a comma-separated list of field names means these fields will be appended to every requested object, next to the fields that are already there by default. For example, the request https://atlas.ripe.net/api/v2/measurements/2000000/ will not, by default, return the fields participation_requests and probes, mainly because these fields require extra calls to the back-end database and contain information that is not obviously needed. If you add optional_fields=participation_requests,probes as a query parameter, however, you will see these two extra fields: https://atlas.ripe.net/api/v2/measurements/2000000/?optional_fields=participation_requests,probes The page and page_size Query Parameters The page and page_size query parameters are used in conjunction most of the time on requests that return object lists. The query parameter page_size allows you to set the number of objects returned in one page, while page allows you to specify the page number you want to view, based on a specified number or the default page_size of 100. The APIs use these query parameters themselves to construct links to the next and previous page of any list of objects. For example, if you request the URL: https://atlas.ripe.net/api/v2/measurements/ You’ll see that the API returns a next field that contains a link with the query parameters ?page=2. There are some important things to note when using these query parameters: Values over 500 on the query parameter page_size will be automatically limited to 500. The product of the values page_size and page cannot be more than 20,000. A request higher than this limit will result in an HTTP error. See this page for information on how to overcome this limit. Using the page and page_size parameters is meant to limit the size of the response as a convenience for users. Using many requests with small limits will not speed up (or slow down), the RIPE Atlas APIs. Using many small requests will, however, require more overhead on you network connection in comparison to one big request to RIPE Atlas. More Query Parameters mine=true If you are logged in to RIPE Atlas, you can see objects that you own by passing the query parameter mine=true for measurement objects. sort This query parameter will order the results by the field name that is given as the value, e.g. sort=-id. key The key parameter allows you to authenticate and authorise yourself to the RIPE Atlas APIs. The actual key can be generated by you if you have a RIPE Atlas account, or if somebody gave you one. Authentication As mentioned in the overview, there are two methods to authenticate to RIPE Atlas and you can use most of our APIs unauthenticated (i.e. as an anonymous user). The two authentication methods are: Use an API key. This is the preferred way of authentication to the APIs. Use a session-based cookie. This is primarily used for client-side JavaScript in web browsers. API Keys The preferred and most convenient method to authenticate to RIPE Atlas is to use API keys. The user who created the API key is referred to by RIPE Atlas as the creator of the key. Key permissions can never be greater than those of the creator. This also means that key permissions can be lowered when the creator’s permissions are lowered. API keys can be used used in the RIPE Atlas APIs in one of two ways: by passing them in as query parameters in a web request: https://atlas.ripe.net/api/v2/measurements/?key=1233-3434-4556-565 by including the key in the Authorization header, e.g. with curl: curl -H &quot;Authorization: Key 1233-3434-4556-565&quot; &quot;https://atlas.ripe.net/api/v2/measurements/&quot; Notes Regarding 403 A 403 Forbidden error will response will be returned if: the API key does not provide the required permission; the API key does not exist; the API key is either not enabled or is outside of the defined valid from to valid to time range; multiple API keys are presented using either multiple “key=” parameters, or a combination of “key=” parameters and the “Authorization” header. RIPE Atlas Result Streams RIPE Atlas has been providing downloadable results since the very beginning of the project. This works well if you know what time frame you’re interested in, and want to get the data collected during that period. The streaming data service allows you to tap into the real-time data flow of all the collected public results. Every time our system receives a data point or a probe connectivity event occurs, it’s also delivered to the clients who are “tuned in” to that result stream. This feature is implemented using WebSockets. Highlights This service is in prototype status. We’re observing how our system reacts to the streams provided to users in order to evaluate the feasibility and usefulness of a production service. Streaming uses the Socket.IO protocol over WebSockets for real-time event-based communication. You can only subscribe (“tune in”) to results delivered by public measurements. You can subscribe to the connectivity events of any probe. We’re inviting the community to check out the gallery of visualisations provided by the RIPE Atlas team and our users as soon as it becomes available, and to come up with new visualisations and/or to enhance existing ones More Info On Streaming More information on streaming can be found here Using APIs For Measurement A Measurement in the context of the RIPE Atlas APIs is an object holding information about one measurement (called a “one-off” measurement) or a series of measurements performed by one or more probes on the RIPE Atlas network. The response of a single measurement performed by a single probe is called a measurement result. If we look at the information returned in more detail we can discern: Measurement metadata: the ID and the measurement type and information on the selected probes, including whether this is a public measurement. Attributes of the measurement specification, i.e. the attributes that a probe needs to start performing measurements. Status information of the measurement. E.g. Is it running? When was it started?, etc. Type of Information Metadata A Measurement object holds information about the measurement itself. First it holds the fields id and the type that, together, provide a unique identifier for the measurement object. Examples of measurement types are HTTP and Traceroute. The participation requests array holds a list of participation request objects, which describe the probe selection criteria that were made for this measurement. You can read more about the particapation request object here. Please note that this is not the same as the actual probes that are appointed to a measurement by RIPE Atlas. The latter would be part of the status information of the measurement in a object called probes. Finally, there are some fields that describe some of the measurement’s general properties. They are is_public and result, a URL that points to the result of the measurements as performed by the selected probes. The Measurement Specification The Measurement object holds the measurement’s settings, called the “measurement specification” in RIPE Atlas terminology. This specification is a mixture of base attributes, available for all types of measurements and type-specific attributes. Examples of such attributes are packets, method or interval. The measurement specification is the object that is sent to a specific probe to perform its measurement. You can see an exhaustive list of all measurement specification attributes for all kinds of measurements here. Status Information A Measurement object also holds the information about the time series of measurements to be performed by the probes, like the start and stop time of the measurements and the link to the streaming API resource that holds the result of the performed measurements. A Measurement object also holds information about the status of the measurement, e.g. if it is currently running, stopped, etc. Finally, the Measurement object holds information about the actual probes used in the measurement. This information is in an object called probes. This is an optional field, which can be enabled by using the optional_fields=probes query parameter. Measurement Query Parameters Most of the generic query parameters apply to requests for measurement objects. You can use page and page_size to manipulate the number of objects and the pagination; you can use fields and optional_fields to set the fields you want in the response, and so on. See here for more information on these. Field Filters You can filter on most responses that are included in a typical response for measurement objects. Fields like id, target_name, etc. can be used directly as filters: https://atlas.ripe.net/api/v2/measurements/?id=2000000 For some fields, it is also possible to enter a range filter, i.e. a filter that selects a range specified by a list, or by a lower and an upper limit. These range filters have special syntax for their query parameters. The list range filter uses the syntax ?&amp;lt; FIELDNAME &amp;gt;__in=item1,item2. An example is: https://atlas.ripe.net/api/v2/measurements/?id__in=2000000,2000001,2000002 The limit range filter uses the syntax appended with either __gte, __gt, __lte or __lt. As mentioned earlier on gt and gte refer to greater than and greater than or equal. You can combine multiple query parameters to set upper and lower limits: https://atlas.ripe.net/api/v2/measurements/?id__gte=2000000&amp;amp;id__lte=2000010 API References A full list of all available fields and query parameters is available here. Creating Measurements Measurement creation is managed based on the premise of having to submit as little information as possible while still obtaining something useful. With that said, even the simplest measurement requires a rather large amount of information to initiate things. You will need to compose a measurement definition that has at least the type, af, description and target fields, as well as a probes object telling us which probes you want to use for the measurement. If you omit the start_time, we assume you want it started right away; if you don’t set the is_oneoff flag, we assume it must be a regular measurement, and so on. You will also have to use a valid key with the right permissions. If you do want to create measurements, you must use a tool that is able to send POST requests with a payload to RIPE Atlas. Three such tools are postman (a plug-in for Chrome), HttpRequester (a plugin for Firefox) and cURL (a command-line tool). Structure Our measurement REST API uses a JSON payload with a POST verb to create new measurements. You can fill in one or more measurement definitions, one or more probes objects, and some fields that are applicable to all measurements you want to create. The Response The response to any successful POST request will return an object that has one field called measurements. This field holds an array that contains the IDs of the created measurements. The array reflects the order in which they were specified in the definitions list of you request. Simple Example Let’s begin with an example. Assume we want to create a simple ping measurement from 1 probes anywhere in the world to ripe.net. We also want it to be one_off. Here’s how to do this in python: # Reference: https://stackoverflow.com/questions/9746303/how-do-i-send-a-post-request-as-a-json/26876308#26876308 # importing the requests library import requests import json # api-endpoint URL = &quot;https://atlas.ripe.net/api/v2/measurements/?key=&amp;lt;your key&amp;gt;&quot; # defining a params dict for the parameters to be sent to the API body_in_json = { &quot;definitions&quot;:[ { &quot;target&quot;: &quot;ripe.net&quot;, &quot;description&quot;: &quot;My Third Measurement&quot;, &quot;type&quot;: &quot;ping&quot;, &quot;af&quot;: 4, &quot;is_oneoff&quot;: True }] , &quot;probes&quot;: [{ &quot;requested&quot;: 1, &quot;type&quot;: &quot;area&quot;, &quot;value&quot;: &quot;WW&quot; }], &quot;bill_to&quot;: &quot;e7liu@eng.ucsd.edu&quot;, } # Define headers headers = {'Content-type': 'application/json', 'Accept': 'application/json'} # sending get request and saving the response as response object r = requests.post(URL, headers=headers, json=body_in_json) # extracting data in json format data = r.json() print(data) If you have filled out everything correctly, you will get a response like this: {&quot;measurements&quot;: [23021613]} If you didn’t use the right key, or no key at all, you will get an error: {&quot;error&quot;:{&quot;status&quot;:403,&quot;code&quot;:104,&quot;detail&quot;:&quot;Authentication credentials were not provided.&quot;,&quot;title&quot;:&quot;Forbidden&quot;}} If you made a mistake in the entry of the payload, you will get the following error: {&quot;error&quot;:{&quot;status&quot;:400,&quot;code&quot;:104,&quot;detail&quot;:&quot;Invalid input. Please check the documentation.&quot;,&quot;title&quot;:&quot;Bad Request&quot;}} The definition Array The definitions array holds single objects, which we will refer to as measurement definitions. A measurement definition has a similar structure to a measurement specification. The measurement specification, as you might recall, is the collection of measurement settings that a probe needs to perform a measurement. There are some base attributes and some type-specific attributes in the specification. A measurement definition is a sub-set of the measurement specification. There are some required fields, but most are optional. RIPE Atlas will fill out the missing fields with defaults for all non-required fields. Which fields are required differs per measurement type. These are the required fields for all measurement types: description: An arbitrary string you will use to refer to this measurement. type: One of ping,traceroute,dns, sslcert or ntp af: The address family. It must be either 4 or 6. The target field denotes the target of a measurement and is special because it is required for all measurement types except DNS measurements. Note You can use GUI to generate JSON files which could be used directly in replace of the body_in_json part. Base Attributes A measurement definition contains a few base properties, and a myriad of type-specific options. For example, while all definitions have an af property, only traceroute measurements have a paris property. Type Specific Attributes DNS Aside from the base attributes that must be present in any request to create a measurement, there are specific attributes required for each measurement type. We are mentioning only the required fields for every type. An exhaustive reference of all attributes that can be used are listed here. A Full Example { &quot;definitions&quot;: [ { &quot;target&quot;: &quot;www.ripe.net&quot;, &quot;description&quot;: &quot;My Complex Measurement&quot;, &quot;type&quot;: &quot;traceroute&quot;, &quot;af&quot;: 6, &quot;resolve_on_probe&quot;: true, &quot;is_public&quot;: true, &quot;packets&quot;: 16, &quot;protocol&quot;: &quot;ICMP&quot;, &quot;paris&quot;: 99, &quot;firsthop&quot;: 30, &quot;interval&quot;: 1800, &quot;is_oneoff&quot;: false }, { &quot;target&quot;: &quot;www.ripe.net&quot;, &quot;description&quot;: &quot;My Complex Measurement&quot;, &quot;type&quot;: &quot;ping&quot;, &quot;af&quot;: 4, &quot;resolve_on_probe&quot;: false, &quot;is_public&quot;: false, } ], &quot;probes&quot;: [ { &quot;requested&quot;: 10, &quot;type&quot;: &quot;area&quot;, &quot;value&quot;: &quot;WW&quot; }, { &quot;requested&quot;: 5, &quot;type&quot;: &quot;country&quot;, &quot;value&quot;: &quot;GR&quot; }, { &quot;requested&quot;: 5, &quot;type&quot;: &quot;country&quot;, &quot;value&quot;: &quot;CA&quot; }, { &quot;requested&quot;: 3, &quot;type&quot;: &quot;probes&quot;, &quot;value&quot;: [55,19,252] }, { &quot;requested&quot;: 1, &quot;type&quot;: &quot;udm&quot;, &quot;value&quot;: 1000002 } ], &quot;start_time&quot;: 1461807395, &quot;stop_time&quot;: &quot;2018-01-01T12:00:00Z&quot;, &quot;is_oneoff&quot;: true } Stop Measurement Measurements can be stopped by sending a DELETE verb to the URL of the measurement you want to stop. For example, if you want to stop the measurement with msm_id2034345, you will have to send a DELETE verb to: https://atlas.ripe.net/api/v2/measurements/2034305 You can only stop measurements that you’ve created yourself or that you have an API key for (and which has permissions to stop measurements). In the first case, you will have to be logged in with a session-based cookie. Latest Measurement Results API The latest measurement results API can be found here: https://atlas.ripe.net/api/v2/measurements/2000000/latest/?probe_ids=10008 An example code: # importing the requests library import requests import json # api-endpoint URL = &quot;https://atlas.ripe.net/api/v2/measurements/23020975/latest/?key=&amp;lt;YOUR KEY&amp;gt;&quot; # Define headers headers = {'Content-type': 'application/json', 'Accept': 'application/json'} # sending get request and saving the response as response object r = requests.get(URL, headers=headers) # extracting data in json format data = r.json() print(data) Output Format The output format is only slightly different from what you’d expect from the standard measurement result API call. Rather than simply dumping every result as a list, it returns a series of key/value pairs in the format: { probe_id: [&amp;lt;result&amp;gt;], probe_id: [&amp;lt;result&amp;gt;], ... } This allows you to easily fetch the latest result from probe 123, for example, by using: my_data[&quot;123&quot;][0] Filtering You can also do basic filtration by probe id simply by using probe_ids=probe_id,probe_id as query parameters. Note, however, that if you specify a probe ID that is not part of the measurement, you’ll simply get back an empty set. Status Check If you just want to get started using status checks, you simply need to do the following: Create a RIPE Atlas ping measurement using either the website or the API. You may use up to 1,024 probes. Note the newly-created measurement ID Go to: https://atlas.ripe.net/api/v2/measurements/&amp;lt; measurement-id &amp;gt; where &amp;lt; measurement-id &amp;gt; is the ID from your newly created measurement. If the measurement in question is not public, you’ll need to include an API ?key=argument. A new version is available using the link: https://atlas.ripe.net/api/v2/measurements/&amp;lt; measurement-id &amp;gt;/status-check Go to the URL again later to check whether anything has changed. Define your alerts accordingly. An exmaple code: import requests import json # api-endpoint URL = &quot;https://atlas.ripe.net/api/v2/measurements/23020975/&quot; # Define headers headers = {'Content-type': 'application/json', 'Accept': 'application/json'} # sending get request and saving the response as response object r = requests.get(URL, headers=headers) # extracting data in json format data = r.json() print(data)</summary></entry><entry><title type="html">What Is DNS and How To Look Them Up?</title><link href="http://localhost:4000/notes/2019/09/27/what_is_DNS_and_how_to_look_them_up/" rel="alternate" type="text/html" title="What Is DNS and How To Look Them Up?" /><published>2019-09-27T04:05:23-07:00</published><updated>2019-09-27T04:05:23-07:00</updated><id>http://localhost:4000/notes/2019/09/27/what_is_DNS_and_how_to_look_them_up</id><content type="html" xml:base="http://localhost:4000/notes/2019/09/27/what_is_DNS_and_how_to_look_them_up/">&lt;h1 id=&quot;what-is-dns-and-how-to-look-them-up&quot;&gt;What Is DNS and How to Look Them Up&lt;/h1&gt;
&lt;p&gt;Reference:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cloudflare.com/learning/dns/what-is-dns/&quot;&gt;What Is DNS?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://workrobot.com/sysadmin/security/using_DIG.html&quot;&gt;Using DIG to check DNS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://linuxize.com/post/how-to-use-dig-command-to-query-dns-in-linux/&quot;&gt;How to Use Dig Command to Query DNS in Linux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ns1.com/blog/decoding-dig-output&quot;&gt;DECODING DIG OUTPUT&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.dnsimple.com/2015/03/whats-in-a-dns-response/&quot;&gt;What’s In A DNS Response&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;about-dns&quot;&gt;About DNS&lt;/h2&gt;
&lt;h3 id=&quot;whats-dns&quot;&gt;What’s DNS&lt;/h3&gt;
&lt;p&gt;The Domain Name System (DNS), is the phonebook of the internet. Humans interact with internet via domain names (like “www.example.com”), while browsers interact through Internet Protocol (IP) addresses. DNS translates domain names to IP addresses so taht browers could load the resources.&lt;/p&gt;

&lt;p&gt;Each device connected to the internet has an unique IP associated with it, for which could be used to find this device on the internet. DNS servers provide look-ups for the IP addresses and eliminate the need for humans to memorize IP addresses.&lt;/p&gt;

&lt;h2 id=&quot;dns-servers&quot;&gt;DNS Servers&lt;/h2&gt;
&lt;h3 id=&quot;what-is-dns-server&quot;&gt;What is DNS Server&lt;/h3&gt;
&lt;p&gt;Machines dedicated to answering DNS queries (Domain Name -&amp;gt; IP).&lt;/p&gt;

&lt;h3 id=&quot;4-types-dns-servers&quot;&gt;4 Types DNS Servers&lt;/h3&gt;
&lt;p&gt;In a typical DNS query without any caching, there are four servers that work together to deliver an IP address to the client: recursive resolvers, root nameservers, TLD nameservers, and authoritative nameservers.&lt;/p&gt;

&lt;h4 id=&quot;dns-recursor&quot;&gt;DNS Recursor&lt;/h4&gt;
&lt;p&gt;The recursor (also referred to as the &lt;strong&gt;DNS recursive resolver&lt;/strong&gt;) can be thought of as a librarian who is asked to go find a particular book in the library.&lt;/p&gt;

&lt;p&gt;The DNS recursor is a server designed to receive queries from client machines through applications such as web browsers. Typically the recursor is then responsible for making additional requests to satisfy the client’s DNS query.&lt;/p&gt;

&lt;p&gt;DNS recursive resolvers such as Google DNS, OpenDNS, and providers like Comcast all maintain data center installations of DNS recursive resolvers. These resolvers allow for quick and easy queries through optimized clusters of DNS-optimized computer systems.&lt;/p&gt;

&lt;h4 id=&quot;root-nameserver&quot;&gt;Root Nameserver&lt;/h4&gt;
&lt;p&gt;The (13) root server is the first step in translating domain names to IP addresses. It can be thought of like an index in a library that points to different racks of books - typically it serves as a reference to other more specific locations.&lt;/p&gt;

&lt;p&gt;A root server accepts a recursive resolver’s query which includes a domain name, and the root nameserver responds by directing the recursive resolver to a TLD nameserver, based on the extension of that domain (.com, .net, .org, etc.).&lt;/p&gt;

&lt;p&gt;The root nameservers are overseen by a nonprofit called the Internet Corporation for Assigned Names and Numbers (ICANN). Note that while there are 13 root nameservers, that doesn’t mean that there are only 13 machines in the root nameserver system. There are 13 types of root nameservers, but there are multiple copies of each one all over the world.&lt;/p&gt;

&lt;h4 id=&quot;tld-nameserver&quot;&gt;TLD Nameserver&lt;/h4&gt;
&lt;p&gt;The top level domain server (TLD) can be thought of as a specific rack of books in a library. This nameserver is the next step in the search for a specific IP address.&lt;/p&gt;

&lt;p&gt;A TLD nameserver maintains information for all the domain names that share a common domain extension, such as .com, .net, or whatever comes after the last dot in a url. For example, a .com TLD nameserver contains information for every website that ends in ‘.com’. If a user was searching for google.com, after receiving a response from a root nameserver, the recursive resolver would then send a query to a .com TLD nameserver, which would respond by pointing to the authoritative nameserver for that domain.&lt;/p&gt;

&lt;p&gt;Management of TLD nameservers is handled by the Internet Assigned Numbers Authority (IANA), which is a branch of ICANN. The IANA breaks up the TLD servers into two main groups:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Generic top-level domains: These are domains that are not country specific, some of the best-known generic TLDs include .com, .org, .net, .edu, and .gov.&lt;/li&gt;
  &lt;li&gt;Country code top-level domains: These include any domains that are specific to a country or state. Examples include .uk, .us, .ru, and .jp&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;authoritative-nameserver&quot;&gt;Authoritative nameserver&lt;/h4&gt;
&lt;p&gt;This final nameserver can be thought of as a dictionary on a rack of books, in which a specific name can be translated into its definition.&lt;/p&gt;

&lt;p&gt;The authoritative nameserver is the last stop in the nameserver query. It contains information specific to the domain name it serves (e.g. google.com) and it can provide a recursive resolver with the IP address of that server found in the DNS A record, or if the domain has a CNAME record (alias) it will provide the recursive resolver with an alias domain, at which point the recursive resolver will have to perform a whole new DNS lookup to procure a record from an authoritative nameserver (often an A record containing an IP address).&lt;/p&gt;

&lt;h4 id=&quot;additional-nameserver&quot;&gt;Additional nameserver&lt;/h4&gt;
&lt;p&gt;It’s worth mentioning that in instances where the query is for a &lt;strong&gt;subdomain&lt;/strong&gt; such as foo.example.com or blog.cloudflare.com, an additional nameserver will be added to the sequence after the authoritative nameserver, which is responsible for storing the subdomain’s &lt;strong&gt;CNAME record&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-are-the-steps-in-a-dns-lookup&quot;&gt;What are the steps in a DNS lookup?&lt;/h2&gt;
&lt;p&gt;For most situations, DNS is concerned with a domain name being translated into the appropriate IP address. To learn how this process works, it helps to follow the path of a DNS lookup as it travels from a web browser, through the DNS lookup process, and back again. Let’s take a look at the steps.&lt;/p&gt;

&lt;p&gt;Note: Often DNS lookup information will be cached either locally inside the querying computer or remotely in the DNS infrastructure. There are typically 8 steps in a DNS lookup. When DNS information is cached, steps are skipped from the DNS lookup process which makes it quicker. The example below outlines all 8 steps when nothing is cached.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The 8 steps in a DNS lookup&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A user types ‘example.com’ into a web browser and the query travels into the Internet and is received by a DNS recursive resolver.&lt;/li&gt;
  &lt;li&gt;The resolver then queries a DNS root nameserver (.).&lt;/li&gt;
  &lt;li&gt;The root server then responds to the resolver with the address of a Top Level Domain (TLD) DNS server (such as .com or .net), which stores the information for its domains. When searching for example.com, our request is pointed toward the .com TLD.&lt;/li&gt;
  &lt;li&gt;The resolver then makes a request to the .com TLD.&lt;/li&gt;
  &lt;li&gt;The TLD server then responds with the IP address of the domain’s nameserver, example.com.&lt;/li&gt;
  &lt;li&gt;Lastly, the recursive resolver sends a query to the domain’s nameserver.&lt;/li&gt;
  &lt;li&gt;The IP address for example.com is then returned to the resolver from the nameserver.&lt;/li&gt;
  &lt;li&gt;The DNS resolver then responds to the web browser with the IP address of the domain requested initially.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;recursive-dns-resolver-vs-recursive-dns-query&quot;&gt;Recursive DNS Resolver vs Recursive DNS Query&lt;/h3&gt;
&lt;h4 id=&quot;what-is-a-dns-resolver&quot;&gt;What is a DNS resolver?&lt;/h4&gt;
&lt;p&gt;The DNS resolver is the first stop in the DNS lookup, and it is responsible for dealing with the client that made the initial request. The resolver starts the sequence of queries that ultimately leads to a URL being translated into the necessary IP address.&lt;/p&gt;

&lt;h4 id=&quot;what-is-a-dns-query&quot;&gt;What is a DNS Query?&lt;/h4&gt;
&lt;p&gt;A DNS query (also known as a DNS request) is a demand for information sent from a user’s computer (DNS client) to a DNS server (typically a DNS recursive resolver).&lt;/p&gt;

&lt;h5 id=&quot;what-are-the-types-of-dns-queries&quot;&gt;What are the types of DNS Queries?&lt;/h5&gt;
&lt;p&gt;In a typical DNS lookup three types of queries occur. By using a combination of these queries, an optimized process for DNS resolution can result in a reduction of distance traveled. In an ideal situation cached record data will be available, allowing a DNS name server to return a non-recursive query.
3 types of DNS queries:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Recursive query - a DNS client requires that a DNS server will respond to the client with either the requested resource record or an error message if the resolver can’t find the record.&lt;/li&gt;
  &lt;li&gt;Iterative query - If the queried DNS server does not have a match for the query name, it will return a referral to a DNS server authoritative for a lower level of the domain namespace. The DNS client will then make a query to the referral address.&lt;/li&gt;
  &lt;li&gt;Non-recursive query - typically this will occur when a DNS resolver client queries a DNS server for a record that it has access to either because it’s authoritative for the record or the record exists inside of its cache.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;dns-caching&quot;&gt;DNS Caching&lt;/h2&gt;
&lt;h3 id=&quot;what-is-dns-caching-where-does-dns-caching-occur&quot;&gt;What is DNS caching? Where does DNS caching occur?&lt;/h3&gt;
&lt;p&gt;The purpose of caching is to temporarily stored data in a location that results in improvements in performance and reliability for data requests. DNS caching involves storing data closer to the requesting client so that the DNS query can be resolved earlier and additional queries further down the DNS lookup chain can be avoided, thereby improving load times and reducing bandwidth/CPU consumption. DNS data can be cached in a variety of locations, each of which will store DNS records for a set amount of time determined by a &lt;strong&gt;time-to-live (TTL)&lt;/strong&gt;. This time limit is set explicitly in the DNS records for each site. Typically the TTL is in the 24-48 hour range. A TTL is necessary because web servers occasionally change their IP addresses, so resolvers can’t serve the same IP from the cache indefinitely.&lt;/p&gt;

&lt;h4 id=&quot;browser-dns-caching&quot;&gt;Browser DNS caching&lt;/h4&gt;
&lt;p&gt;Modern web browsers are designed by default to cache DNS records for a set amount of time. the purpose here is obvious; the closer the DNS caching occurs to the web browser, the fewer processing steps must be taken in order to check the cache and make the correct requests to an IP address. When a request is made for a DNS record, the browser cache is the first location checked for the requested record.&lt;/p&gt;

&lt;h4 id=&quot;operating-system-os-level-dns-caching&quot;&gt;Operating system (OS) level DNS caching&lt;/h4&gt;
&lt;p&gt;The operating system level DNS resolver is the second and last local stop before a DNS query leaves your machine. The process inside your operating system that is designed to handle this query is commonly called a “stub resolver” or DNS client. When a stub resolver gets a request from an application, it first checks its own cache to see if it has the record. If it does not, it then sends a DNS query (with a recursive flag set), outside the local network to a DNS recursive resolver inside the Internet service provider (ISP).&lt;/p&gt;

&lt;p&gt;When the recursive resolver inside the ISP receives a DNS query, like all previous steps, it will also check to see if the requested host-to-IP-address translation is already stored inside its local persistence layer.&lt;/p&gt;

&lt;p&gt;The recursive resolver also has additional functionality depending on the types of records it has in its cache:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the resolver does not have the &lt;strong&gt;A records&lt;/strong&gt;, but does have the &lt;strong&gt;NS records&lt;/strong&gt; for the authoritative nameservers, it will query those name servers directly, bypassing several steps in the DNS query. This shortcut prevents lookups from the root and .com nameservers (in our search for example.com) and helps the resolution of the DNS query occur more quickly.&lt;/li&gt;
  &lt;li&gt;If the resolver does not have the NS records, it will send a query to the TLD servers (.com in our case), skipping the root server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the unlikely event that the resolver does not have records pointing to the TLD servers, it will then query the root servers. This event typically occurs after a DNS cache has been purged.&lt;/p&gt;

&lt;h2 id=&quot;dns-records&quot;&gt;DNS Records&lt;/h2&gt;
&lt;h3 id=&quot;what-is-a-dns-record&quot;&gt;What is a DNS record?&lt;/h3&gt;
&lt;p&gt;DNS records (aka zone files) are instructions that live in authoritative DNS servers and provide information about a domain including what IP address is associated with that domain and how to handle requests for that domain. These records consist of a series of text files written in what is known as DNS syntax. DNS syntax is just a string of characters used as commands which tell the DNS server what to do. All DNS records also have a ‘TTL’, which stands for time-to-live, and indicates how often a DNS server will refresh that record.&lt;/p&gt;

&lt;h3 id=&quot;what-are-the-most-common-types-of-dns-record&quot;&gt;What are the most common types of DNS record?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A record - The record that holds the IP address of a domain.&lt;/li&gt;
  &lt;li&gt;CNAME record - Forwards one domain or subdomain to another domain, does NOT provide an IP address.&lt;/li&gt;
  &lt;li&gt;MX record - Directs mail to an email server.&lt;/li&gt;
  &lt;li&gt;TXT record - Lets an admin store text notes in the record.&lt;/li&gt;
  &lt;li&gt;NS record - Stores the name server for a DNS entry.&lt;/li&gt;
  &lt;li&gt;SOA record - Stores admin information about a domain.&lt;/li&gt;
  &lt;li&gt;SRV record - Specifies a port for specific services.&lt;/li&gt;
  &lt;li&gt;PTR record - Provides a domain name in reverse-lookups.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;a-record&quot;&gt;A Record&lt;/h4&gt;
&lt;p&gt;The ‘A’ stands for ‘address’ and this is the most fundamental type of DNS record, it indicates the IP address of a given domain. For example if you pull the DNS records of google.com, the ‘A’ record currently returns an IP address of: 172.217.5.78. ‘A’ records only hold Ipv4 addresses, if the site has a Ipv6 address, it will instead use an ‘AAAA’ record&lt;/p&gt;

&lt;p&gt;Example of an A record:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;example.com&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;record type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;value&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;TTL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;@&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;A&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;12.34.56.78&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14400&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The ‘@’ here indicates that this is a record for the root domain, and the ‘14400’ value is the TTL (Time To Live), listed in seconds. The default TTL for A records is 14400 seconds. This means that if an A record gets updated, it takes 240 minutes (14400 seconds) to take effect (because after 14400 secs you will refetch).&lt;/p&gt;

&lt;p&gt;The vast majority of websites only have one A record, but &lt;strong&gt;it’s possible to have several A records&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;cname-record&quot;&gt;CNAME record&lt;/h4&gt;
&lt;p&gt;The ‘canonical name’ record is used in lieu of an A record, when a domain or subdomain is an alias of another domain. Imagine a scavenger hunt where each clue points to another clue, and the final clue points to the treasure. A domain with a CNAME record is like a clue which can point you to another clue (another domain with a CNAME record) or to the treasure (a domain with an A record). For example, suppose www.example.com has a CNAME record with a value of ‘example.com’ (without the ‘www’). This means when a DNS server hits the DNS records for www.example.com, it actually triggers another DNS lookup to example.com, returning example.com’s IP address. In this case we would say that example.com is the canonical name (or true name) of blog.example.com. All CNAME records must point to a domain, never to an IP address.&lt;/p&gt;

&lt;p&gt;Oftentimes, when sites have subdomains such as blog.example.com or shop.example.com, those subdomains will have CNAME records which point to a root domain (example.com). This way if the IP of the host changes, only the DNS A record for the root domain needs to be updated and all the CNAME records will follow along with whatever changes are made to the root.&lt;/p&gt;

&lt;p&gt;A frequent misconception is that a CNAME record must always resolve to the same website as the domain it points to, but this is not the case. The CNAME record only points the client to the same IP address as the root domain. Once the client hits that IP address, the web server will still handle the URL accordingly. So for instance, blog.example.com might have a CNAME that points to example.com, directing the client to example.com’s IP address. But when the client actually connects to that IP address, the web server will look at the URL, see that it’s blog.example.com, and deliver the blog page rather than the home page.&lt;/p&gt;

&lt;p&gt;Example of a CNAME record:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;example.com&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;record type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;value&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;TTL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;@&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;CNAME&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;is an alias of example.com&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;32600&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In this example you can see that blog.example.com points to example.com, and assuming it’s based on our example A record we know that it will eventually resolve to the IP address 12.34.56.78.&lt;/p&gt;

&lt;h4 id=&quot;mx-record&quot;&gt;MX record?&lt;/h4&gt;
&lt;p&gt;This is the ‘mail exchange’ record, and it directs email to a mail server. The MX record indicates how email messages should be routed in accordance with Simple Mail Transfer Protocol (SMTP, the standard protocol for all email.) Like CNAME records, an MX record must always point to another domain.&lt;/p&gt;

&lt;p&gt;Example of an MX record:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;example.com&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;record type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;value&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;TTL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;@&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;MX&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10 mailhost.example.com&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;45000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;MX&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;20 mailhost2.example.com&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;45000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The numbers before the domains in the value entries for these MX records indicate preference; the server will always try mailhost1 first because 10 is lower than 20, in the result of a message send failure, the server will default to mailhost2.&lt;/p&gt;

&lt;h2 id=&quot;dig-command&quot;&gt;DIG Command&lt;/h2&gt;
&lt;p&gt;Domain information groper (DIG) is a flexible tool for interrogating DNS name servers. It performs DNS lookups and displays the answers that are returned from the name server(s) that were queried.&lt;/p&gt;

&lt;p&gt;With the dig command, you can query information about various DNS records including host addresses, mail exchanges, and name servers. It is the most commonly used tool among system administrators for troubleshooting DNS problems because of its flexibility and ease of use.&lt;/p&gt;

&lt;h3 id=&quot;dig-command-format&quot;&gt;Dig Command Format&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dig name @server &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;dig&lt;/strong&gt; invokes the utility&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;name&lt;/strong&gt; is the host you are looking for information about (eg. example.com)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@server&lt;/strong&gt; allows you to query the name from a different location (eg. 8.8.8.8 for Google’s resolver or dns1.p01.nsone.net to test a zone before you delegate)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;type&lt;/strong&gt; is an optional field that allows you to have DIG locate a specific record type (eg. A, AAAA, CNAME, MX, TXT, etc.)&lt;/p&gt;

&lt;h3 id=&quot;understanding-the-dig-output&quot;&gt;Understanding the Dig Output&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$dig&lt;/span&gt; linux.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The output should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/dig_sample.jpg&quot; alt=&quot;DIG Output&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The first line of the output prints the &lt;strong&gt;installed dig version&lt;/strong&gt;, and &lt;strong&gt;the query that was invoked&lt;/strong&gt;. The second line shows the &lt;strong&gt;global options&lt;/strong&gt; (by default only cmd).
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.13.3 &amp;lt;&amp;lt;&amp;gt;&amp;gt; linux.org
  ;; global options: +cmd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;If you don’t want those lines to be included in the output use the &lt;strong&gt;+nocmd&lt;/strong&gt; option. This options must be the very first argument after the dig command.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;This section includes technical details about the answer received from the requested authority (DNS server). The second line of this section is the header, including the &lt;strong&gt;opcode (the action performed by dig)&lt;/strong&gt; and the &lt;strong&gt;status of the action&lt;/strong&gt;. In this case the status is &lt;strong&gt;NOERROR which means that the requested authority served the query without any issue&lt;/strong&gt;. Next line starts out with &lt;strong&gt;flags - these are options that can be set to determine which sections of the answer get printed, or determine the timeout and retry strategies&lt;/strong&gt;. The subsequent fields &lt;a href=&quot;https://tools.ietf.org/html/rfc6895&quot;&gt;Query, Answer, Authority and Additional&lt;/a&gt; express the number of records in each section for all opcodes.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ;; Got answer:
  ;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 37159
  ;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 2, ADDITIONAL: 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The meaning of each flag:&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  qr = specifies whether this message is a query (0), or a response (1)
  aa = Authoritative Answer
  tc = Truncation
  rd = Recursion Desired (set in a query and copied into the response if recursion is supported)
  ra = Recursion Available (if set, denotes recursive query support is available)
  ad = Authenticated Data (for DNSSEC only; indicates that the data was authenticated)
  cd = Checking Disabled (DNSSEC only; disables checking at the receiving server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;This section is shown by default only on the newer versions if the dig utility. This is related to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Extension_mechanisms_for_DNS&quot;&gt;Extension mechanisms for DNS (EDNS)&lt;/a&gt;.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ;; OPT PSEUDOSECTION:
  ; EDNS: version: 0, flags:; udp: 4096
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;The question section reaffirms what you went looking for. By default, dig will request the A record. In this case, DIG went looking for an IPv4 address (A Record) at linux.org.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ;; QUESTION SECTION:
  ;linux.org.			IN	A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;The answer section provides us with an answer to our question. The answer we’re looking at here has five parts: the NAME, TTL, CLASS, TYPE and RDATA.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  linux.org.		300	IN	A	104.27.167.219
  linux.org.		300	IN	A	104.27.166.219
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;NAME&lt;/strong&gt;: The NAME resource field states the domain name to which the resource record refers.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;TTL&lt;/strong&gt;: The TTL resource field is an abreviation for the phrase “time to live”. This field gives the amount of time, in seconds, for which the record should be considered valid.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;CLASS&lt;/strong&gt;: The CLASS resource field is generally rarely used. The &lt;strong&gt;IN&lt;/strong&gt; in this example, and most examples you’re likely to see, indicates that this record is of the &lt;strong&gt;“Internet” CLASS&lt;/strong&gt; of DNS record. There are also CH (for Chaosnet) and HS (for Hesiod) classes, as well as QCLASS options for use only in queries.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;TYPE&lt;/strong&gt;: The TYPE resource field is where the format of the record is defined. There are many TYPEs of resource records, the most common being A (which gives an IPv4 address for a NAME), AAAA (which gives an IPv6 address), MX (which sets the location of a mail server), CNAME (or canonical name, which maps one NAME to another), and TXT (which can include any arbitrary text). This field really defines what sort of RDATA is to be expected for the record.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;RDATA&lt;/strong&gt;:The RDATA resource field is, in many ways, the heart of a DNS answer. Without it, there’s nothing for the record to do. In this particular case, since we’re looking at an A record, the RDATA is an IPv4 address which indicates where the NAME linux.org should resolve to. Other record TYPEs will have different RDATA content.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The Authority section tells us what server(s) are the authority for answering DNS queries about the queried domain.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ;; AUTHORITY SECTION:
  linux.org.		86379	IN	NS	lia.ns.cloudflare.com.
  linux.org.		86379	IN	NS	mark.ns.cloudflare.com.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;The additional section gives us information about the IP addresses of the authoritative DNS servers shown in the authority section.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ;; ADDITIONAL SECTION:
  lia.ns.cloudflare.com.	84354	IN	A	173.245.58.185
  lia.ns.cloudflare.com.	170762	IN	AAAA	2400:cb00:2049:1::adf5:3ab9
  mark.ns.cloudflare.com.	170734	IN	A	173.245.59.130
  mark.ns.cloudflare.com.	170734	IN	AAAA	2400:cb00:2049:1::adf5:3b82
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;This is the last section of the dig output which includes statistics about the query.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ;; Query time: 58 msec
  ;; SERVER: 192.168.1.1#53(192.168.1.1)
  ;; WHEN: Fri Oct 12 11:46:46 CEST 2018
  ;; MSG SIZE  rcvd: 212
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;query-a-short-answer&quot;&gt;Query a Short Answer&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dig linux.org +short
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;104.18.59.123
104.18.58.123
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;query-a-detailed-answer&quot;&gt;Query a Detailed Answer&lt;/h3&gt;
&lt;p&gt;For more detailed answer turn off all the results using the &lt;strong&gt;+noall options and then turn on only the answer section with the +answer option&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dig linux.org +noall +answer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.13.3 &amp;lt;&amp;lt;&amp;gt;&amp;gt; linux.org +noall +answer
;; global options: +cmd
linux.org.		67	IN	A	104.18.58.123
linux.org.		67	IN	A	104.18.59.123
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;query-specific-name-server&quot;&gt;Query Specific Name Server&lt;/h3&gt;
&lt;p&gt;By default if no name server is specified, dig will use the servers listed in &lt;strong&gt;/etc/resolv.conf&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;To specify a name server against which the query will be executed use the @ (at) symbol followed by the name server IP address or hostname.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dig linux.org @8.8.8.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.13.3 &amp;lt;&amp;lt;&amp;gt;&amp;gt; linux.org @8.8.8.8
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 39110
;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 512
;; QUESTION SECTION:
;linux.org.			IN	A

;; ANSWER SECTION:
linux.org.		299	IN	A	104.18.58.123
linux.org.		299	IN	A	104.18.59.123

;; Query time: 54 msec
;; SERVER: 8.8.8.8#53(8.8.8.8)
;; WHEN: Fri Oct 12 14:28:01 CEST 2018
;; MSG SIZE  rcvd: 70
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;query-a-record-type&quot;&gt;Query A Record Type&lt;/h3&gt;
&lt;p&gt;To get a list of all the address(es) for a domain name use the &lt;strong&gt;a&lt;/strong&gt; option:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dig +nocmd google.com a +noall +answer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;google.com.		128	IN	A	216.58.206.206
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;query-cname-records&quot;&gt;Query CNAME Records&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dig +nocmd mail.google.com cname +noall +answer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mail.google.com.	553482	IN	CNAME	googlemail.l.google.com.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;reverse-dns-lookups&quot;&gt;Reverse DNS Lookups&lt;/h3&gt;
&lt;p&gt;To query the hostname associated with a specific IP address use the &lt;strong&gt;-x&lt;/strong&gt; option.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dig &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; 208.118.235.148 +noall +answer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you can see from the output below the IP address 208.118.235.148 is associated with the hostname wildebeest.gnu.org&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.13.3 &amp;lt;&amp;lt;&amp;gt;&amp;gt; -x 208.118.235.148 +noall +answer
;; global options: +cmd
148.235.118.208.in-addr.arpa. 245 IN	PTR	wildebeest.gnu.org.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bulk-queries&quot;&gt;Bulk Queries&lt;/h3&gt;
&lt;p&gt;If you want to query a large number of domains, you can add them in a file (one domain per line) and use the -&lt;strong&gt;-f&lt;/strong&gt; option followed by the file name.&lt;/p&gt;

&lt;p&gt;In the following example, we are querying the domains listed in the &lt;strong&gt;domains.txt&lt;/strong&gt; file.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lxer.com
linuxtoday.com
tuxmachines.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Run:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dig &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; domains.txt +short
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;108.166.170.171
70.42.23.121
204.68.122.43
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;checking-to-see-if-a-dns-server-has-a-particular-rr-in-its-cache&quot;&gt;Checking to see if a DNS server has a particular RR in its cache&lt;/h3&gt;
&lt;p&gt;“RR” stands for resource record, which is DNS-speak for any kind of record (A, CNAME, SOA, NS, PTR, etc.). If you want to infer whether anyone using a particular DNS server has visited a host recently, you can specify a non-recursive query. Most DNS servers will obey this request, although this is not required. For security reasons some better DNS server software can be configured to intentionally ignore requests not to recurse.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dig @8.8.8.8 uploads.spy2mobile.com +norecurse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Enze Liu</name></author><category term="notes" /><summary type="html">What Is DNS and How to Look Them Up Reference: What Is DNS? Using DIG to check DNS How to Use Dig Command to Query DNS in Linux DECODING DIG OUTPUT What’s In A DNS Response About DNS What’s DNS The Domain Name System (DNS), is the phonebook of the internet. Humans interact with internet via domain names (like “www.example.com”), while browsers interact through Internet Protocol (IP) addresses. DNS translates domain names to IP addresses so taht browers could load the resources. Each device connected to the internet has an unique IP associated with it, for which could be used to find this device on the internet. DNS servers provide look-ups for the IP addresses and eliminate the need for humans to memorize IP addresses. DNS Servers What is DNS Server Machines dedicated to answering DNS queries (Domain Name -&amp;gt; IP). 4 Types DNS Servers In a typical DNS query without any caching, there are four servers that work together to deliver an IP address to the client: recursive resolvers, root nameservers, TLD nameservers, and authoritative nameservers. DNS Recursor The recursor (also referred to as the DNS recursive resolver) can be thought of as a librarian who is asked to go find a particular book in the library. The DNS recursor is a server designed to receive queries from client machines through applications such as web browsers. Typically the recursor is then responsible for making additional requests to satisfy the client’s DNS query. DNS recursive resolvers such as Google DNS, OpenDNS, and providers like Comcast all maintain data center installations of DNS recursive resolvers. These resolvers allow for quick and easy queries through optimized clusters of DNS-optimized computer systems. Root Nameserver The (13) root server is the first step in translating domain names to IP addresses. It can be thought of like an index in a library that points to different racks of books - typically it serves as a reference to other more specific locations. A root server accepts a recursive resolver’s query which includes a domain name, and the root nameserver responds by directing the recursive resolver to a TLD nameserver, based on the extension of that domain (.com, .net, .org, etc.). The root nameservers are overseen by a nonprofit called the Internet Corporation for Assigned Names and Numbers (ICANN). Note that while there are 13 root nameservers, that doesn’t mean that there are only 13 machines in the root nameserver system. There are 13 types of root nameservers, but there are multiple copies of each one all over the world. TLD Nameserver The top level domain server (TLD) can be thought of as a specific rack of books in a library. This nameserver is the next step in the search for a specific IP address. A TLD nameserver maintains information for all the domain names that share a common domain extension, such as .com, .net, or whatever comes after the last dot in a url. For example, a .com TLD nameserver contains information for every website that ends in ‘.com’. If a user was searching for google.com, after receiving a response from a root nameserver, the recursive resolver would then send a query to a .com TLD nameserver, which would respond by pointing to the authoritative nameserver for that domain. Management of TLD nameservers is handled by the Internet Assigned Numbers Authority (IANA), which is a branch of ICANN. The IANA breaks up the TLD servers into two main groups: Generic top-level domains: These are domains that are not country specific, some of the best-known generic TLDs include .com, .org, .net, .edu, and .gov. Country code top-level domains: These include any domains that are specific to a country or state. Examples include .uk, .us, .ru, and .jp Authoritative nameserver This final nameserver can be thought of as a dictionary on a rack of books, in which a specific name can be translated into its definition. The authoritative nameserver is the last stop in the nameserver query. It contains information specific to the domain name it serves (e.g. google.com) and it can provide a recursive resolver with the IP address of that server found in the DNS A record, or if the domain has a CNAME record (alias) it will provide the recursive resolver with an alias domain, at which point the recursive resolver will have to perform a whole new DNS lookup to procure a record from an authoritative nameserver (often an A record containing an IP address). Additional nameserver It’s worth mentioning that in instances where the query is for a subdomain such as foo.example.com or blog.cloudflare.com, an additional nameserver will be added to the sequence after the authoritative nameserver, which is responsible for storing the subdomain’s CNAME record. What are the steps in a DNS lookup? For most situations, DNS is concerned with a domain name being translated into the appropriate IP address. To learn how this process works, it helps to follow the path of a DNS lookup as it travels from a web browser, through the DNS lookup process, and back again. Let’s take a look at the steps. Note: Often DNS lookup information will be cached either locally inside the querying computer or remotely in the DNS infrastructure. There are typically 8 steps in a DNS lookup. When DNS information is cached, steps are skipped from the DNS lookup process which makes it quicker. The example below outlines all 8 steps when nothing is cached. The 8 steps in a DNS lookup: A user types ‘example.com’ into a web browser and the query travels into the Internet and is received by a DNS recursive resolver. The resolver then queries a DNS root nameserver (.). The root server then responds to the resolver with the address of a Top Level Domain (TLD) DNS server (such as .com or .net), which stores the information for its domains. When searching for example.com, our request is pointed toward the .com TLD. The resolver then makes a request to the .com TLD. The TLD server then responds with the IP address of the domain’s nameserver, example.com. Lastly, the recursive resolver sends a query to the domain’s nameserver. The IP address for example.com is then returned to the resolver from the nameserver. The DNS resolver then responds to the web browser with the IP address of the domain requested initially. Recursive DNS Resolver vs Recursive DNS Query What is a DNS resolver? The DNS resolver is the first stop in the DNS lookup, and it is responsible for dealing with the client that made the initial request. The resolver starts the sequence of queries that ultimately leads to a URL being translated into the necessary IP address. What is a DNS Query? A DNS query (also known as a DNS request) is a demand for information sent from a user’s computer (DNS client) to a DNS server (typically a DNS recursive resolver). What are the types of DNS Queries? In a typical DNS lookup three types of queries occur. By using a combination of these queries, an optimized process for DNS resolution can result in a reduction of distance traveled. In an ideal situation cached record data will be available, allowing a DNS name server to return a non-recursive query. 3 types of DNS queries: Recursive query - a DNS client requires that a DNS server will respond to the client with either the requested resource record or an error message if the resolver can’t find the record. Iterative query - If the queried DNS server does not have a match for the query name, it will return a referral to a DNS server authoritative for a lower level of the domain namespace. The DNS client will then make a query to the referral address. Non-recursive query - typically this will occur when a DNS resolver client queries a DNS server for a record that it has access to either because it’s authoritative for the record or the record exists inside of its cache. DNS Caching What is DNS caching? Where does DNS caching occur? The purpose of caching is to temporarily stored data in a location that results in improvements in performance and reliability for data requests. DNS caching involves storing data closer to the requesting client so that the DNS query can be resolved earlier and additional queries further down the DNS lookup chain can be avoided, thereby improving load times and reducing bandwidth/CPU consumption. DNS data can be cached in a variety of locations, each of which will store DNS records for a set amount of time determined by a time-to-live (TTL). This time limit is set explicitly in the DNS records for each site. Typically the TTL is in the 24-48 hour range. A TTL is necessary because web servers occasionally change their IP addresses, so resolvers can’t serve the same IP from the cache indefinitely. Browser DNS caching Modern web browsers are designed by default to cache DNS records for a set amount of time. the purpose here is obvious; the closer the DNS caching occurs to the web browser, the fewer processing steps must be taken in order to check the cache and make the correct requests to an IP address. When a request is made for a DNS record, the browser cache is the first location checked for the requested record. Operating system (OS) level DNS caching The operating system level DNS resolver is the second and last local stop before a DNS query leaves your machine. The process inside your operating system that is designed to handle this query is commonly called a “stub resolver” or DNS client. When a stub resolver gets a request from an application, it first checks its own cache to see if it has the record. If it does not, it then sends a DNS query (with a recursive flag set), outside the local network to a DNS recursive resolver inside the Internet service provider (ISP). When the recursive resolver inside the ISP receives a DNS query, like all previous steps, it will also check to see if the requested host-to-IP-address translation is already stored inside its local persistence layer. The recursive resolver also has additional functionality depending on the types of records it has in its cache: If the resolver does not have the A records, but does have the NS records for the authoritative nameservers, it will query those name servers directly, bypassing several steps in the DNS query. This shortcut prevents lookups from the root and .com nameservers (in our search for example.com) and helps the resolution of the DNS query occur more quickly. If the resolver does not have the NS records, it will send a query to the TLD servers (.com in our case), skipping the root server. In the unlikely event that the resolver does not have records pointing to the TLD servers, it will then query the root servers. This event typically occurs after a DNS cache has been purged. DNS Records What is a DNS record? DNS records (aka zone files) are instructions that live in authoritative DNS servers and provide information about a domain including what IP address is associated with that domain and how to handle requests for that domain. These records consist of a series of text files written in what is known as DNS syntax. DNS syntax is just a string of characters used as commands which tell the DNS server what to do. All DNS records also have a ‘TTL’, which stands for time-to-live, and indicates how often a DNS server will refresh that record. What are the most common types of DNS record? A record - The record that holds the IP address of a domain. CNAME record - Forwards one domain or subdomain to another domain, does NOT provide an IP address. MX record - Directs mail to an email server. TXT record - Lets an admin store text notes in the record. NS record - Stores the name server for a DNS entry. SOA record - Stores admin information about a domain. SRV record - Specifies a port for specific services. PTR record - Provides a domain name in reverse-lookups. A Record The ‘A’ stands for ‘address’ and this is the most fundamental type of DNS record, it indicates the IP address of a given domain. For example if you pull the DNS records of google.com, the ‘A’ record currently returns an IP address of: 172.217.5.78. ‘A’ records only hold Ipv4 addresses, if the site has a Ipv6 address, it will instead use an ‘AAAA’ record Example of an A record: example.com record type value TTL @ A 12.34.56.78 14400 The ‘@’ here indicates that this is a record for the root domain, and the ‘14400’ value is the TTL (Time To Live), listed in seconds. The default TTL for A records is 14400 seconds. This means that if an A record gets updated, it takes 240 minutes (14400 seconds) to take effect (because after 14400 secs you will refetch). The vast majority of websites only have one A record, but it’s possible to have several A records. CNAME record The ‘canonical name’ record is used in lieu of an A record, when a domain or subdomain is an alias of another domain. Imagine a scavenger hunt where each clue points to another clue, and the final clue points to the treasure. A domain with a CNAME record is like a clue which can point you to another clue (another domain with a CNAME record) or to the treasure (a domain with an A record). For example, suppose www.example.com has a CNAME record with a value of ‘example.com’ (without the ‘www’). This means when a DNS server hits the DNS records for www.example.com, it actually triggers another DNS lookup to example.com, returning example.com’s IP address. In this case we would say that example.com is the canonical name (or true name) of blog.example.com. All CNAME records must point to a domain, never to an IP address. Oftentimes, when sites have subdomains such as blog.example.com or shop.example.com, those subdomains will have CNAME records which point to a root domain (example.com). This way if the IP of the host changes, only the DNS A record for the root domain needs to be updated and all the CNAME records will follow along with whatever changes are made to the root. A frequent misconception is that a CNAME record must always resolve to the same website as the domain it points to, but this is not the case. The CNAME record only points the client to the same IP address as the root domain. Once the client hits that IP address, the web server will still handle the URL accordingly. So for instance, blog.example.com might have a CNAME that points to example.com, directing the client to example.com’s IP address. But when the client actually connects to that IP address, the web server will look at the URL, see that it’s blog.example.com, and deliver the blog page rather than the home page. Example of a CNAME record: example.com record type value TTL @ CNAME is an alias of example.com 32600 In this example you can see that blog.example.com points to example.com, and assuming it’s based on our example A record we know that it will eventually resolve to the IP address 12.34.56.78. MX record? This is the ‘mail exchange’ record, and it directs email to a mail server. The MX record indicates how email messages should be routed in accordance with Simple Mail Transfer Protocol (SMTP, the standard protocol for all email.) Like CNAME records, an MX record must always point to another domain. Example of an MX record: example.com record type value TTL @ MX 10 mailhost.example.com 45000 @ MX 20 mailhost2.example.com 45000 The numbers before the domains in the value entries for these MX records indicate preference; the server will always try mailhost1 first because 10 is lower than 20, in the result of a message send failure, the server will default to mailhost2. DIG Command Domain information groper (DIG) is a flexible tool for interrogating DNS name servers. It performs DNS lookups and displays the answers that are returned from the name server(s) that were queried. With the dig command, you can query information about various DNS records including host addresses, mail exchanges, and name servers. It is the most commonly used tool among system administrators for troubleshooting DNS problems because of its flexibility and ease of use. Dig Command Format $ dig name @server type dig invokes the utility name is the host you are looking for information about (eg. example.com) @server allows you to query the name from a different location (eg. 8.8.8.8 for Google’s resolver or dns1.p01.nsone.net to test a zone before you delegate) type is an optional field that allows you to have DIG locate a specific record type (eg. A, AAAA, CNAME, MX, TXT, etc.) Understanding the Dig Output $dig linux.org The output should look something like this: The first line of the output prints the installed dig version, and the query that was invoked. The second line shows the global options (by default only cmd). ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.13.3 &amp;lt;&amp;lt;&amp;gt;&amp;gt; linux.org ;; global options: +cmd If you don’t want those lines to be included in the output use the +nocmd option. This options must be the very first argument after the dig command. This section includes technical details about the answer received from the requested authority (DNS server). The second line of this section is the header, including the opcode (the action performed by dig) and the status of the action. In this case the status is NOERROR which means that the requested authority served the query without any issue. Next line starts out with flags - these are options that can be set to determine which sections of the answer get printed, or determine the timeout and retry strategies. The subsequent fields Query, Answer, Authority and Additional express the number of records in each section for all opcodes. ;; Got answer: ;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 37159 ;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 2, ADDITIONAL: 5 The meaning of each flag: qr = specifies whether this message is a query (0), or a response (1) aa = Authoritative Answer tc = Truncation rd = Recursion Desired (set in a query and copied into the response if recursion is supported) ra = Recursion Available (if set, denotes recursive query support is available) ad = Authenticated Data (for DNSSEC only; indicates that the data was authenticated) cd = Checking Disabled (DNSSEC only; disables checking at the receiving server) This section is shown by default only on the newer versions if the dig utility. This is related to the Extension mechanisms for DNS (EDNS). ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 The question section reaffirms what you went looking for. By default, dig will request the A record. In this case, DIG went looking for an IPv4 address (A Record) at linux.org. ;; QUESTION SECTION: ;linux.org. IN A The answer section provides us with an answer to our question. The answer we’re looking at here has five parts: the NAME, TTL, CLASS, TYPE and RDATA. linux.org. 300 IN A 104.27.167.219 linux.org. 300 IN A 104.27.166.219 NAME: The NAME resource field states the domain name to which the resource record refers. TTL: The TTL resource field is an abreviation for the phrase “time to live”. This field gives the amount of time, in seconds, for which the record should be considered valid. CLASS: The CLASS resource field is generally rarely used. The IN in this example, and most examples you’re likely to see, indicates that this record is of the “Internet” CLASS of DNS record. There are also CH (for Chaosnet) and HS (for Hesiod) classes, as well as QCLASS options for use only in queries. TYPE: The TYPE resource field is where the format of the record is defined. There are many TYPEs of resource records, the most common being A (which gives an IPv4 address for a NAME), AAAA (which gives an IPv6 address), MX (which sets the location of a mail server), CNAME (or canonical name, which maps one NAME to another), and TXT (which can include any arbitrary text). This field really defines what sort of RDATA is to be expected for the record. RDATA:The RDATA resource field is, in many ways, the heart of a DNS answer. Without it, there’s nothing for the record to do. In this particular case, since we’re looking at an A record, the RDATA is an IPv4 address which indicates where the NAME linux.org should resolve to. Other record TYPEs will have different RDATA content. The Authority section tells us what server(s) are the authority for answering DNS queries about the queried domain. ;; AUTHORITY SECTION: linux.org. 86379 IN NS lia.ns.cloudflare.com. linux.org. 86379 IN NS mark.ns.cloudflare.com. The additional section gives us information about the IP addresses of the authoritative DNS servers shown in the authority section. ;; ADDITIONAL SECTION: lia.ns.cloudflare.com. 84354 IN A 173.245.58.185 lia.ns.cloudflare.com. 170762 IN AAAA 2400:cb00:2049:1::adf5:3ab9 mark.ns.cloudflare.com. 170734 IN A 173.245.59.130 mark.ns.cloudflare.com. 170734 IN AAAA 2400:cb00:2049:1::adf5:3b82 This is the last section of the dig output which includes statistics about the query. ;; Query time: 58 msec ;; SERVER: 192.168.1.1#53(192.168.1.1) ;; WHEN: Fri Oct 12 11:46:46 CEST 2018 ;; MSG SIZE rcvd: 212 Query a Short Answer $ dig linux.org +short Output: 104.18.59.123 104.18.58.123 Query a Detailed Answer For more detailed answer turn off all the results using the +noall options and then turn on only the answer section with the +answer option. $ dig linux.org +noall +answer Output: ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.13.3 &amp;lt;&amp;lt;&amp;gt;&amp;gt; linux.org +noall +answer ;; global options: +cmd linux.org. 67 IN A 104.18.58.123 linux.org. 67 IN A 104.18.59.123 Query Specific Name Server By default if no name server is specified, dig will use the servers listed in /etc/resolv.conf file. To specify a name server against which the query will be executed use the @ (at) symbol followed by the name server IP address or hostname. $ dig linux.org @8.8.8.8 Output: ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.13.3 &amp;lt;&amp;lt;&amp;gt;&amp;gt; linux.org @8.8.8.8 ;; global options: +cmd ;; Got answer: ;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 39110 ;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 512 ;; QUESTION SECTION: ;linux.org. IN A ;; ANSWER SECTION: linux.org. 299 IN A 104.18.58.123 linux.org. 299 IN A 104.18.59.123 ;; Query time: 54 msec ;; SERVER: 8.8.8.8#53(8.8.8.8) ;; WHEN: Fri Oct 12 14:28:01 CEST 2018 ;; MSG SIZE rcvd: 70 Query A Record Type To get a list of all the address(es) for a domain name use the a option: $ dig +nocmd google.com a +noall +answer output: google.com. 128 IN A 216.58.206.206 Query CNAME Records $ dig +nocmd mail.google.com cname +noall +answer output: mail.google.com. 553482 IN CNAME googlemail.l.google.com. Reverse DNS Lookups To query the hostname associated with a specific IP address use the -x option. $ dig -x 208.118.235.148 +noall +answer As you can see from the output below the IP address 208.118.235.148 is associated with the hostname wildebeest.gnu.org ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.13.3 &amp;lt;&amp;lt;&amp;gt;&amp;gt; -x 208.118.235.148 +noall +answer ;; global options: +cmd 148.235.118.208.in-addr.arpa. 245 IN PTR wildebeest.gnu.org. Bulk Queries If you want to query a large number of domains, you can add them in a file (one domain per line) and use the --f option followed by the file name. In the following example, we are querying the domains listed in the domains.txt file. lxer.com linuxtoday.com tuxmachines.org Run: dig -f domains.txt +short Output: 108.166.170.171 70.42.23.121 204.68.122.43 Checking to see if a DNS server has a particular RR in its cache “RR” stands for resource record, which is DNS-speak for any kind of record (A, CNAME, SOA, NS, PTR, etc.). If you want to infer whether anyone using a particular DNS server has visited a host recently, you can specify a non-recursive query. Most DNS servers will obey this request, although this is not required. For security reasons some better DNS server software can be configured to intentionally ignore requests not to recurse. $ dig @8.8.8.8 uploads.spy2mobile.com +norecurse</summary></entry><entry><title type="html">How To Read Scientific Literature</title><link href="http://localhost:4000/notes/2019/09/26/how_to_read_scientific_literature/" rel="alternate" type="text/html" title="How To Read Scientific Literature" /><published>2019-09-26T02:05:23-07:00</published><updated>2019-09-26T02:05:23-07:00</updated><id>http://localhost:4000/notes/2019/09/26/how_to_read_scientific_literature</id><content type="html" xml:base="http://localhost:4000/notes/2019/09/26/how_to_read_scientific_literature/">&lt;h1 id=&quot;how-to-read-scientific-literature&quot;&gt;How To Read Scientific Literature&lt;/h1&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://web.stanford.edu/class/ee384m/Handouts/HowtoReadPaper.pdf&quot;&gt;How to Read a Paper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cs.columbia.edu/~hgs/netbib/efficientReading.pdf&quot;&gt;Efficient Reading of Papers in Science and Technology&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://people.cs.pitt.edu/~litman/courses/cs2710/papers/howtoreadacspaper.pdf&quot;&gt;How to Read a Computer Science Research Paper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cs.jhu.edu/~jason/advice/how-to-read-a-paper.html&quot;&gt;How to Read a Technical Paper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-paper-reading&quot;&gt;Why Paper Reading?&lt;/h2&gt;
&lt;p&gt;Researchers must read papers for several reasons: to review them for a conference or a class, to keep current in their field, or for a literature survey of a new field.&lt;/p&gt;

&lt;h2 id=&quot;three-pass-approach&quot;&gt;Three-Pass Approach&lt;/h2&gt;
&lt;p&gt;You should read the paper multiple passes, instead of starting at the beginning and plowing all the way to the end.&lt;/p&gt;

&lt;h3 id=&quot;first-pass&quot;&gt;First Pass&lt;/h3&gt;
&lt;p&gt;The purpose of first pass is to have a general idea about the paper. More specifically, you should:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Carefully&lt;/strong&gt; read the title, abstract, and introduction&lt;/li&gt;
  &lt;li&gt;Read the section and sub-section headings, but ignore everything else&lt;/li&gt;
  &lt;li&gt;Read the conclusions
At the end of the first pass, you should be able to answer the following questions:&lt;/li&gt;
  &lt;li&gt;Category: What type of paper is this? Theoratical (describes a theory or algorithm or provides a mathematical proof)? Engineering (an implementation &amp;amp;&amp;amp; evauluation of an algorithm, or part or all of a computer system or application)? Empirical paper (experiment designed to test some hypothesis)?&lt;/li&gt;
  &lt;li&gt;Topic: What problems does this paper address? Are they important and why?&lt;/li&gt;
  &lt;li&gt;Context: Which other papers is it related to? Which theoretical bases were used to analyze the problem?&lt;/li&gt;
  &lt;li&gt;Contributions: What are the paper’s main contributions?&lt;/li&gt;
  &lt;li&gt;Correctness: Do the assumptions appear to be valid?
Depending on this information, you might choose not to keep reading. This could because it is not interesting, the assumptions are not valid, or you don’t have enough background knowledge.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;second-pass&quot;&gt;Second Pass&lt;/h3&gt;
&lt;p&gt;Grasp the paper’s content, but not the detail. In the second pass, read the paper with greater care, but ignore details such as proofs. It helps to jot down the key points, or to make comments in the margins, as you read.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Read the introductions carefully.
    &lt;ul&gt;
      &lt;li&gt;What assumptions do they rely on?&lt;/li&gt;
      &lt;li&gt;Do the authors present evidence that they know why they are doing this piece of research?&lt;/li&gt;
      &lt;li&gt;Do they have an idea of the larger picture?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Read the definitions and theroms carefully.&lt;/li&gt;
  &lt;li&gt;Read the methods section carefully&lt;/li&gt;
  &lt;li&gt;Pay special attention to graphs. Are the axes properly labeled? Are results shown with error bars, so that conclusions are statistically significant?&lt;/li&gt;
  &lt;li&gt;Mark relevant unread references for further reading. 
After the second pass, you should be able to summarize the main thrust of the paper, with supporting evidence, to someone else.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;third-pass&quot;&gt;Third Pass&lt;/h3&gt;
&lt;p&gt;The key to the third pass is to attempt to virtually re-implement the paper: that is, making the same assumptions as the authors, re-create the work. You should identify and challenge every assumption in every statement.&lt;/p&gt;

&lt;h2 id=&quot;doing-literature-survey&quot;&gt;Doing Literature Survey&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Use Google Scholar to find three to five &lt;strong&gt;recent papers&lt;/strong&gt; in the area. Do one pass on each paper to get a sense of the work, then read their related work
sections. You will find a thumbnail summary of the recent work, and perhaps, if you are lucky, a pointer to a recent survey paper.&lt;/li&gt;
  &lt;li&gt;Otherwise, in the second step, find shared citations and repeated author names in the bibliography. These are the key papers and researchers in that area. Download the key papers and set them aside.&lt;/li&gt;
  &lt;li&gt;The third step is to go to the website for these top conferences and look through their recent proceedings.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;indicators-of-a-good-research-paper&quot;&gt;Indicators of A Good Research Paper&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The problem the paper addresses is clearly stated, both in the abstract and early on in the paper itself. The technical importance and broader impacts of the paper are described.&lt;/li&gt;
  &lt;li&gt;The paper includes a clear description of the experiment, system or theory the
problem addresses. This is usually the second section of the paper.&lt;/li&gt;
  &lt;li&gt;The paper describes and analyzes the results of the work described.&lt;/li&gt;
  &lt;li&gt;The authors have some sound, non-trivial ideas for future work.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;questions-to-ask-when-reading-a-paper&quot;&gt;Questions To Ask When Reading A Paper&lt;/h2&gt;
&lt;h3 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Do their results rely on any assumptions about trends or environments?&lt;/li&gt;
  &lt;li&gt;Are the author’s claims reasonable and realistic?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;methods&quot;&gt;Methods&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Is the approach clearly described? Can you outline the steps or summarize the approach?&lt;/li&gt;
  &lt;li&gt;Did they address the problem stated earlier in the paper/measure what they claim?&lt;/li&gt;
  &lt;li&gt;Can they explain what they observed?&lt;/li&gt;
  &lt;li&gt;Did they have adequate controls/require unreasonable amounts of human guidance?&lt;/li&gt;
  &lt;li&gt;Were tests carried out in a standard/objective way?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Do the conclusions follow logically from the observations?&lt;/li&gt;
  &lt;li&gt;What other conclusions or correlations are there in the data that they did not point out?&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Enze Liu</name></author><category term="notes" /><summary type="html">How To Read Scientific Literature References: How to Read a Paper Efficient Reading of Papers in Science and Technology How to Read a Computer Science Research Paper How to Read a Technical Paper Why Paper Reading? Researchers must read papers for several reasons: to review them for a conference or a class, to keep current in their field, or for a literature survey of a new field. Three-Pass Approach You should read the paper multiple passes, instead of starting at the beginning and plowing all the way to the end. First Pass The purpose of first pass is to have a general idea about the paper. More specifically, you should: Carefully read the title, abstract, and introduction Read the section and sub-section headings, but ignore everything else Read the conclusions At the end of the first pass, you should be able to answer the following questions: Category: What type of paper is this? Theoratical (describes a theory or algorithm or provides a mathematical proof)? Engineering (an implementation &amp;amp;&amp;amp; evauluation of an algorithm, or part or all of a computer system or application)? Empirical paper (experiment designed to test some hypothesis)? Topic: What problems does this paper address? Are they important and why? Context: Which other papers is it related to? Which theoretical bases were used to analyze the problem? Contributions: What are the paper’s main contributions? Correctness: Do the assumptions appear to be valid? Depending on this information, you might choose not to keep reading. This could because it is not interesting, the assumptions are not valid, or you don’t have enough background knowledge. Second Pass Grasp the paper’s content, but not the detail. In the second pass, read the paper with greater care, but ignore details such as proofs. It helps to jot down the key points, or to make comments in the margins, as you read. Read the introductions carefully. What assumptions do they rely on? Do the authors present evidence that they know why they are doing this piece of research? Do they have an idea of the larger picture? Read the definitions and theroms carefully. Read the methods section carefully Pay special attention to graphs. Are the axes properly labeled? Are results shown with error bars, so that conclusions are statistically significant? Mark relevant unread references for further reading. After the second pass, you should be able to summarize the main thrust of the paper, with supporting evidence, to someone else. Third Pass The key to the third pass is to attempt to virtually re-implement the paper: that is, making the same assumptions as the authors, re-create the work. You should identify and challenge every assumption in every statement. Doing Literature Survey Use Google Scholar to find three to five recent papers in the area. Do one pass on each paper to get a sense of the work, then read their related work sections. You will find a thumbnail summary of the recent work, and perhaps, if you are lucky, a pointer to a recent survey paper. Otherwise, in the second step, find shared citations and repeated author names in the bibliography. These are the key papers and researchers in that area. Download the key papers and set them aside. The third step is to go to the website for these top conferences and look through their recent proceedings. Indicators of A Good Research Paper The problem the paper addresses is clearly stated, both in the abstract and early on in the paper itself. The technical importance and broader impacts of the paper are described. The paper includes a clear description of the experiment, system or theory the problem addresses. This is usually the second section of the paper. The paper describes and analyzes the results of the work described. The authors have some sound, non-trivial ideas for future work. Questions To Ask When Reading A Paper Assumptions Do their results rely on any assumptions about trends or environments? Are the author’s claims reasonable and realistic? Methods Is the approach clearly described? Can you outline the steps or summarize the approach? Did they address the problem stated earlier in the paper/measure what they claim? Can they explain what they observed? Did they have adequate controls/require unreasonable amounts of human guidance? Were tests carried out in a standard/objective way? Conclusions Do the conclusions follow logically from the observations? What other conclusions or correlations are there in the data that they did not point out?</summary></entry></feed>